<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>oyiadin</title>
  
  <subtitle>Share anything interesting.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://oyiadin.github.io/"/>
  <updated>2018-02-04T07:28:55.004Z</updated>
  <id>http://oyiadin.github.io/</id>
  
  <author>
    <name>Chen Xiaoyuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>南邮网络攻防训练平台逆向入门题目 Writeup</title>
    <link href="http://oyiadin.github.io/2018/writeup-of-re-ctf-nuptzj/"/>
    <id>http://oyiadin.github.io/2018/writeup-of-re-ctf-nuptzj/</id>
    <published>2018-02-04T07:26:46.000Z</published>
    <updated>2018-02-04T07:28:55.004Z</updated>
    
    <content type="html"><![CDATA[<p>共三道题，前边几道题比较简单，就不写 writeup 了。</p><h2 id="WxyVM"><a href="#WxyVM" class="headerlink" title="WxyVM"></a>WxyVM</h2><p>二话不说拖进 IDA，找到 <code>main</code> 后 F5，顺便给作用明显的变量命个名：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [sp+Bh] [bp-5h]@1</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [sp+Ch] [bp-4h]@3</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"[WxyVM 0.0.1]"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"input your flag:"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;scanf_buffer_bytes);</span><br><span class="line">  v4 = <span class="number">1</span>;</span><br><span class="line">  sub_4005B6();</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(&amp;scanf_buffer_bytes) != <span class="number">24</span> )</span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">23</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(&amp;scanf_buffer_bytes + i) != goal_dword[i] )</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v4 )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"correct"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"wrong"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码逻辑很清晰，先读字符串到 <code>scanf_buffer_bytes</code>，然后调用 <code>sub_4005B6()</code>，推测是进行加密，子函数跑完后，让加密后的数据跟 <code>goal_dword</code> 进行比对。读懂代码后直接跟进去子函数，同样对，先明显意图的变量进行命名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v0; <span class="comment">// ST04_4@3</span></span><br><span class="line">  __int64 result; <span class="comment">// rax@3</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [sp+0h] [bp-10h]@1</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// [sp+8h] [bp-8h]@3</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">14999</span>; i += <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = raw_data[(<span class="keyword">signed</span> __int64)i];</span><br><span class="line">    v3 = raw_data[(<span class="keyword">signed</span> __int64)(i + <span class="number">2</span>)];</span><br><span class="line">    result = v0;</span><br><span class="line">    <span class="keyword">switch</span> ( v0 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">        result = raw_data[(<span class="keyword">signed</span> __int64)(i + <span class="number">1</span>)];</span><br><span class="line">        *(&amp;scanf_buffer_bytes + result) += v3;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">        result = raw_data[(<span class="keyword">signed</span> __int64)(i + <span class="number">1</span>)];</span><br><span class="line">        *(&amp;scanf_buffer_bytes + result) -= v3;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">        result = raw_data[(<span class="keyword">signed</span> __int64)(i + <span class="number">1</span>)];</span><br><span class="line">        *(&amp;scanf_buffer_bytes + result) ^= v3;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4u</span>:</span><br><span class="line">        result = raw_data[(<span class="keyword">signed</span> __int64)(i + <span class="number">1</span>)];</span><br><span class="line">        *(&amp;scanf_buffer_bytes + result) *= v3;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5u</span>:</span><br><span class="line">        result = raw_data[(<span class="keyword">signed</span> __int64)(i + <span class="number">1</span>)];</span><br><span class="line">        *(&amp;scanf_buffer_bytes + result) ^= *(&amp;scanf_buffer_bytes + raw_data[(<span class="keyword">signed</span> __int64)(i + <span class="number">2</span>)]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读一下代码，大意是从 <code>raw_data</code> 依次读取数据，3 Bytes 为一组。Byte 1 用来 switch，Byte 2 用来指定相对于 <code>buffer</code> 的偏移量，Byte 3 用以参与计算。</p><p>所以代码到这就很明显了，从 <code>goal_dword</code> 逆操作还原出 <code>scanf_buffer_bytes</code> 即可。不过代码里有两个坑：</p><ol><li>从 <code>goal_dword</code> 取数据时需要每 4 位只保留最低位。</li><li>会溢出</li></ol><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">raw_data = <span class="number">0x00000000006010C0</span></span><br><span class="line">answer   = <span class="number">0x0000000000601060</span></span><br><span class="line">buffer   = <span class="number">0x0000000000604B80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逆操作</span></span><br><span class="line">op = &#123;</span><br><span class="line">    <span class="number">1</span>: <span class="keyword">lambda</span> x, y: (x-y)%sys.maxint+<span class="number">1</span> <span class="keyword">if</span> x-y&lt;<span class="number">0</span> <span class="keyword">else</span> x-y,</span><br><span class="line">    <span class="comment"># 这里为了模拟溢出，比较粗暴</span></span><br><span class="line">    <span class="number">2</span>: <span class="keyword">lambda</span> x, y: (x+y)%maxint,</span><br><span class="line">    <span class="number">3</span>: <span class="keyword">lambda</span> x, y: x^y,</span><br><span class="line">    <span class="number">4</span>: <span class="keyword">lambda</span> x, y: x/y,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line">    PatchByte(buffer+i, Byte(answer+<span class="number">4</span>*i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14997</span>, <span class="number">-1</span>, <span class="number">-3</span>):</span><br><span class="line">    v0 = Byte(raw_data + i)</span><br><span class="line">    v1 = Byte(raw_data + i + <span class="number">1</span>)</span><br><span class="line">    v2 = Byte(raw_data + i + <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> v0 &gt; <span class="number">0</span> <span class="keyword">and</span> v0 &lt; <span class="number">5</span>:</span><br><span class="line">        PatchByte(buffer+v1, op[v0](Byte(buffer+v1), v2))</span><br><span class="line">    <span class="keyword">elif</span> v0 == <span class="number">5</span>:</span><br><span class="line">        PatchByte(buffer+v1, Byte(buffer+v1)^Byte(buffer+v2))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># find flag at buffer</span></span><br></pre></td></tr></table></figure><hr><h2 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h2><p>照常拖进 IDA 顺势 F5，读代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 offset; <span class="comment">// rbx@4</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> chr; <span class="comment">// eax@5</span></span><br><span class="line">  <span class="keyword">bool</span> v5; <span class="comment">// bp@5</span></span><br><span class="line">  <span class="keyword">bool</span> v6; <span class="comment">// al@8</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *msg; <span class="comment">// rdi@19</span></span><br><span class="line">  __int64 y; <span class="comment">// [sp+0h] [bp-28h]@1</span></span><br><span class="line">  __int32 x;  <span class="comment">// 读汇编后觉得 &amp;y+1 视为 &amp;x 更好</span></span><br><span class="line"></span><br><span class="line">  x = <span class="number">0L</span>;</span><br><span class="line">  y = <span class="number">0L</span>L;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Input flag:"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;buffer, <span class="number">0L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(&amp;buffer) != <span class="number">24</span> || <span class="built_in">strncmp</span>(&amp;buffer, <span class="string">"nctf&#123;"</span>, <span class="number">5u</span>LL) || *(&amp;byte_6010BF + <span class="number">24</span>) != <span class="number">125</span> )</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="comment">// assert len(buffer) == 24 &amp;&amp; buffer.startswith("nctf&#123;") &amp;&amp; buffer.endswith("&#125;")</span></span><br><span class="line">wrong_and_exit:</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Wrong flag!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  offset = <span class="number">5L</span>L;  <span class="comment">// 从 &#123; 后面第一个字符开始，后边 ++offset 遍历 buffer</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(&amp;buffer) - <span class="number">1</span> &gt; <span class="number">5</span> )  <span class="comment">// 恒为真</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      chr = *(&amp;buffer + offset);</span><br><span class="line">      v5 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( chr &gt; <span class="string">'N'</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        chr = (<span class="keyword">unsigned</span> __int8)chr;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)chr == <span class="string">'O'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v6 = func_O((_DWORD *)&amp;x);  <span class="comment">// v6 = x-- &gt; 0;</span></span><br><span class="line">          <span class="keyword">goto</span> assign_v6_to_v5_and_goto_label_15;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( chr == <span class="string">'o'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v6 = func_o((<span class="keyword">int</span> *)&amp;x);  <span class="comment">// v6 = x++ &lt; 8;</span></span><br><span class="line">          <span class="keyword">goto</span> assign_v6_to_v5_and_goto_label_15;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        chr = (<span class="keyword">unsigned</span> __int8)chr;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)chr == <span class="string">'.'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v6 = func_dot(&amp;y);  <span class="comment">// v6 = y-- &gt; 0;</span></span><br><span class="line">          <span class="keyword">goto</span> assign_v6_to_v5_and_goto_label_15;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( chr == <span class="string">'0'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v6 = func_0((<span class="keyword">int</span> *)&amp;y);  <span class="comment">// v6 = y++ &lt; 8;</span></span><br><span class="line">assign_v6_to_v5_and_goto_label_15:</span><br><span class="line">          v5 = v6;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 分析到下边发现是走迷宫，O左 o右 .上 0下</span></span><br><span class="line">LABEL_15:</span><br><span class="line">      <span class="keyword">if</span> ( !(<span class="keyword">unsigned</span> __int8)check(asc_601060, x, y) )  <span class="comment">// SHIDWORD(y) == x, 检查是否撞到墙壁</span></span><br><span class="line">        <span class="comment">// asc_601060: 8x8 array</span></span><br><span class="line">        <span class="comment">//   ******</span></span><br><span class="line">        <span class="comment">// *   *  *</span></span><br><span class="line">        <span class="comment">// *** * **</span></span><br><span class="line">        <span class="comment">// **  * **</span></span><br><span class="line">        <span class="comment">// *  *#  *</span></span><br><span class="line">        <span class="comment">// ** *** *</span></span><br><span class="line">        <span class="comment">// **     *</span></span><br><span class="line">        <span class="comment">// ********</span></span><br><span class="line">        <span class="comment">// return 1 if asc[x][y] == (' ' or '#') else 0</span></span><br><span class="line">        <span class="keyword">goto</span> wrong_and_exit;  <span class="comment">// assert return == 1;</span></span><br><span class="line">      <span class="keyword">if</span> ( ++offset &gt;= <span class="built_in">strlen</span>(&amp;buffer) - <span class="number">1</span> )  <span class="comment">// 自增，如果下一个已经是 &#125;，则：</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v5 )  <span class="comment">// 防止走出迷宫的范围</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">wrong_and_exit_2:</span><br><span class="line">        msg = <span class="string">"Wrong flag!"</span>;</span><br><span class="line">        <span class="keyword">goto</span> show_msg_and_exit;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *(&amp;asc_601060[<span class="number">8</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)y] + x) != <span class="string">'#'</span> )  <span class="comment">// 最后要以 # 为终点，否则 wrong</span></span><br><span class="line">    <span class="keyword">goto</span> wrong_and_exit_2;</span><br><span class="line">  msg = <span class="string">"Congratulations!"</span>;</span><br><span class="line">show_msg_and_exit:</span><br><span class="line">  <span class="built_in">puts</span>(msg);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 综上，就是走迷宫，从 (0, 0) 走到 # 处即为 flag</span></span><br></pre></td></tr></table></figure><hr><h2 id="WxyVM2"><a href="#WxyVM2" class="headerlink" title="WxyVM2"></a>WxyVM2</h2><p>丢进 IDA，发现 <code>Sorry, this node is too big to display</code>，顿时觉得水深[一脸黑线]。我不管！读汇编好费时的！F5 之后放一边，居然被我等来了 C 代码，哈哈哈，那就继续分析。</p><p>一看发现两万多行，emmm，先读下头尾。很简单，<code>scanf</code> 到 <code>0x694100</code> 处，一番操作后与 <code>0x6940600</code> 进行比对而已（依旧是那个 <code>byte</code> 与 <code>dword</code> 比对的坑，小心）。所以我就去头去尾，把代码丢 Sublime 里分析了。</p><p>看了一会，发现了猫腻：</p><p><code>scanf</code> 放进去那个 <code>buffer</code> 的范围是 <code>0x694100 ~ 0x694118</code>，最终比对的目标是 <code>0x694060 ~ 0x6940C0</code>，而且后者的数据没变过。又发现中间那两万多行很多跟解题无关，就把对无关地址的操作全剔除了，剩下两千多行有效操作。</p><p>然后思路就很清晰了，反向操作即可。先写个 py 脚本逆一下操作顺序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l = [i <span class="keyword">for</span> i <span class="keyword">in</span> open(<span class="string">'operations.txt'</span>)]</span><br><span class="line">f = open(<span class="string">'operations-reversed.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> reversed(l):</span><br><span class="line">    f.write(i)</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment"># 没有 close() 至少也 flush() 一下…刚开始这里忘了，卡了很久，很奇怪为啥数据少了一小部分…</span></span><br></pre></td></tr></table></figure><p>然后在 Sublime 里把 <code>--</code> 换成 <code>-= 1</code>，<code>++</code> 同理。再写个很丑的正则替换一下各个操作：<code>(\w+)_(\w+) \+= (.*?);</code> to <code>$1(0x$2) -= $3;</code>，这里是加法变减法，其他同理。</p><p>由于看起来很可能会有溢出，我就直接用 C 写了，省得像之前那样活生生地在 py 里模拟溢出…</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint8_t</span> goal[<span class="number">25</span>] = &#123;</span><br><span class="line">    <span class="number">0xC0</span>, <span class="number">0x85</span>, <span class="number">0xF9</span>, <span class="number">0x6C</span>, <span class="number">0xE2</span>, <span class="number">0x14</span>, <span class="number">0xBB</span>, <span class="number">0xE4</span>, <span class="number">0x0D</span>,</span><br><span class="line">    <span class="number">0x59</span>, <span class="number">0x1C</span>, <span class="number">0x23</span>, <span class="number">0x88</span>, <span class="number">0x6E</span>, <span class="number">0x9B</span>, <span class="number">0xCA</span>, <span class="number">0xBA</span>, <span class="number">0x5C</span>,</span><br><span class="line">    <span class="number">0x37</span>, <span class="number">0xFF</span>, <span class="number">0x48</span>, <span class="number">0xD8</span>, <span class="number">0x1F</span>, <span class="number">0xAB</span>, <span class="number">0xA5</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> byte(i) goal[i-0x694100]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里放上边得到的逆操作们</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">25</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, goal[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Over，至此南邮的训练平台逆向入门题 All Clear~</p><p>Here are two useful pages:</p><p><a href="https://www.cnblogs.com/ljtknowns/p/5741341.html" target="_blank" rel="noopener">1: 汇编指令缩写, ljtcnblogs</a><br><a href="http://blog.csdn.net/huiguixian/article/details/52026710" target="_blank" rel="noopener">2: IDA逆向常用宏定义, 小小攻城师</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;共三道题，前边几道题比较简单，就不写 writeup 了。&lt;/p&gt;
&lt;h2 id=&quot;WxyVM&quot;&gt;&lt;a href=&quot;#WxyVM&quot; class=&quot;headerlink&quot; title=&quot;WxyVM&quot;&gt;&lt;/a&gt;WxyVM&lt;/h2&gt;&lt;p&gt;二话不说拖进 IDA，找到 &lt;code&gt;m
      
    
    </summary>
    
    
      <category term="writeup, c, python, re, ctf, 南邮" scheme="http://oyiadin.github.io/tags/writeup-c-python-re-ctf-%E5%8D%97%E9%82%AE/"/>
    
  </entry>
  
  <entry>
    <title>能调用任意函数的函数</title>
    <link href="http://oyiadin.github.io/2018/a-call-any-function/"/>
    <id>http://oyiadin.github.io/2018/a-call-any-function/</id>
    <published>2018-01-25T16:00:10.000Z</published>
    <updated>2018-01-29T08:02:49.314Z</updated>
    
    <content type="html"><![CDATA[<p>其实这是某社团第三次 C 语言作业中一道附加题，当时一看到题目就觉得很有趣，花了一个下午研究了函数调用栈，内嵌汇编的知识，当晚给做了出来。能跑，但是没有解决函数的返回类型这个问题。</p><p>这几天接触宏函数接触得比较多，尝试着实现了一个没用的伪泛型宏函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> declare_function(type, function_name, ...) \</span></span><br><span class="line">    type function_name ## _ #<span class="meta"># type(__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line">declare_function(<span class="keyword">int</span>, my_f, <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[]) &#123;</span><br><span class="line">    <span class="keyword">return</span> call(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上边这段代码会被展开成为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_f_int</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> call(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原本按照我的设想，通过临时定义一个函数就可以让用户指定返回类型了，虽然多次调用会使函数重名，但至少离目标更近了一步。但是等到 gcc 报错我才意识到，函数不能嵌套定义…</p><p>所以又停滞了好几天，直到我看到一个用 gcc 特性实现的 lambda 宏函数，这件事才终于得到解决。虽然并非标准 C，但在这过程中已经学到够多了，心满意足。</p><p>Talk is cheap, here is my code :)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lambda(type, function_body) \</span></span><br><span class="line">    (&#123; type fn function_body fn; &#125;)</span><br><span class="line"><span class="comment">// usage: lambda(int, (int a, int b) &#123; return a+b; &#125;)(2, 3) == 5</span></span><br><span class="line"><span class="comment">// 涉及的第一个特性叫 Statement Expression [1]</span></span><br><span class="line"><span class="comment">// 由括号包裹起来的代码可以有自己的循环、分支甚至是局部变量</span></span><br><span class="line"><span class="comment">// 考虑到这里涉及的代码不止一行，所以用花括号包裹起来(这一项是标准 C)</span></span><br><span class="line"><span class="comment">// 最后一行代码将成为整个 Statement Expression 的值</span></span><br><span class="line"><span class="comment">// 展开得到：</span></span><br><span class="line"><span class="comment">// (&#123;</span></span><br><span class="line"><span class="comment">//   int fn (int a, int b) &#123; return a+b; &#125;</span></span><br><span class="line"><span class="comment">//   fn;</span></span><br><span class="line"><span class="comment">// &#125;) (2, 3);</span></span><br><span class="line"><span class="comment">// 首先在 Statement Expression 中定义了一个局部函数，然后返回这个函数并调用</span></span><br><span class="line"><span class="comment">// 涉及到第二个特性叫 Nested Functions，可以在函数内定义函数 [2]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> call(type, f, ...)              \ <span class="comment">// 变参宏，C99</span></span></span><br><span class="line">    lambda(type, (<span class="keyword">void</span>(*pf)(), ...) &#123;   \ <span class="comment">// 传递的参数无需做处理，告诉编译器需要变参支持即可</span></span><br><span class="line">        <span class="keyword">int</span> return_to;                  \ <span class="comment">// 储存调用点下一行指令的地址</span></span><br><span class="line">        __asm__ __volatile__ (          \ <span class="comment">// 内嵌汇编</span></span><br><span class="line">                                        \ <span class="comment">// 此时栈已经被清空重设，需要恢复未调用时的状态</span></span><br><span class="line">            <span class="string">"movl %%ebp, %%esp;"</span>        \ <span class="comment">// 恢复栈顶</span></span><br><span class="line">            <span class="string">"movl (%%esp), %%ebp;"</span>      \ <span class="comment">// 恢复栈基</span></span><br><span class="line">            <span class="string">"movl 4(%%esp), %0;"</span>        \ <span class="comment">// 保存回溯点</span></span><br><span class="line">            <span class="string">"movl %0, 8(%%esp);"</span>        \ <span class="comment">// 回溯点往上挪，覆盖掉传进来的第一个参数(pf)</span></span><br><span class="line">            <span class="string">"addl $8, %%esp;"</span>           \ <span class="comment">// 使栈顶所指符合stdcall约定</span></span><br><span class="line">                                        \ <span class="comment">// 栈状态已经伪装完毕，仿佛未曾来过此地</span></span><br><span class="line">                                        \ <span class="comment">// 覆盖掉了 pf 这个额外的参数，其他参数原样扔给被调用函数</span></span><br><span class="line">            <span class="string">"jmp *%1;"</span>                  \ <span class="comment">// 正式跳到被调用函数</span></span><br><span class="line">            : <span class="string">"=&amp;r"</span> (return_to)         \</span><br><span class="line">            : <span class="string">"nr"</span> (*pf));              \</span><br><span class="line">    &#125;)((<span class="keyword">void</span>(*)()) f, __VA_ARGS__)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Returned: %d\n"</span>, call(<span class="keyword">int</span>, sum, <span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>P.S. 有个简单粗暴的完美解决方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> call(function_name, ...) function_name(__VA_ARGS__)</span></span><br></pre></td></tr></table></figure><p>不过看起来总觉得不够 Geek，是吧…</p><hr><p>Reference:</p><p><a href="https://gcc.gnu.org/onlinedocs/gcc/Statement-Exprs.html" target="_blank" rel="noopener">1: Statement Expression, GCC Manual</a><br><a href="https://gcc.gnu.org/onlinedocs/gcc/Nested-Functions.html" target="_blank" rel="noopener">2: Nested Function, GCC Manual</a><br><a href="https://gcc.gnu.org/onlinedocs/gcc/Variadic-Macros.html#Variadic-Macros" target="_blank" rel="noopener">3: Macros with a Variable Number of Arguments, GCC Manual</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实这是某社团第三次 C 语言作业中一道附加题，当时一看到题目就觉得很有趣，花了一个下午研究了函数调用栈，内嵌汇编的知识，当晚给做了出来。能跑，但是没有解决函数的返回类型这个问题。&lt;/p&gt;
&lt;p&gt;这几天接触宏函数接触得比较多，尝试着实现了一个没用的伪泛型宏函数：&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="c, asm, macro" scheme="http://oyiadin.github.io/tags/c-asm-macro/"/>
    
  </entry>
  
  <entry>
    <title>C 中二维数组之我的理解</title>
    <link href="http://oyiadin.github.io/2017/2-dimension-array-in-c/"/>
    <id>http://oyiadin.github.io/2017/2-dimension-array-in-c/</id>
    <published>2017-12-15T13:30:00.000Z</published>
    <updated>2018-01-29T05:33:38.530Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//void f(double []);   // double[] 等价于 double*，但如果是多维数组，只能省略第一维</span></span><br><span class="line"><span class="comment">//void f(double **);   // double[][4] 不与 double** 等价，因为第二维度不可省略</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span> [][<span class="number">4</span>])</span></span>;  <span class="comment">// double(*)[4] 与 double[][4] 等价</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">4</span>; ++j) &#123;</span><br><span class="line">            a[i][j] = i+j/<span class="number">10.0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[%d, %d] =&gt; %.1lf\n"</span>, i, j, a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Output:</span></span><br><span class="line">    <span class="comment">// [0, 0] =&gt; 0.0</span></span><br><span class="line">    <span class="comment">// [0, 1] =&gt; 0.1</span></span><br><span class="line">    <span class="comment">// [0, 2] =&gt; 0.2</span></span><br><span class="line">    <span class="comment">// [0, 3] =&gt; 0.3</span></span><br><span class="line">    <span class="comment">// [1, 0] =&gt; 1.0</span></span><br><span class="line">    <span class="comment">// [1, 1] =&gt; 1.1</span></span><br><span class="line">    <span class="comment">// [1, 2] =&gt; 1.2</span></span><br><span class="line">    <span class="comment">// [1, 3] =&gt; 1.3</span></span><br><span class="line">    <span class="comment">// [2, 0] =&gt; 2.0</span></span><br><span class="line">    <span class="comment">// [2, 1] =&gt; 2.1</span></span><br><span class="line">    <span class="comment">// [2, 2] =&gt; 2.2</span></span><br><span class="line">    <span class="comment">// [2, 3] =&gt; 2.3</span></span><br><span class="line"></span><br><span class="line">    f(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void f(double (*a)[4]) &#123;</span><br><span class="line">    <span class="comment">// a 是一个指针，指向的数据类型为“double [4]”</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d %d\n%d %d %d\n"</span>, <span class="keyword">sizeof</span>(a), <span class="keyword">sizeof</span>(a[<span class="number">0</span>]), <span class="keyword">sizeof</span>(a[<span class="number">0</span>][<span class="number">0</span>]),</span><br><span class="line">        <span class="comment">// 指针(一般)为 int，所以 4</span></span><br><span class="line">        <span class="comment">// 将 a 视作数组，取得第一个元素（类型为 double [4]），</span></span><br><span class="line">        <span class="comment">// 所以 sizeof(double)*4 = 32</span></span><br><span class="line">        <span class="comment">// a[0] 取得类型为 double [4] 的元素，对这个元素再次取下标，得到 double</span></span><br><span class="line">        <span class="keyword">sizeof</span>(<span class="keyword">double</span>), <span class="keyword">sizeof</span>(<span class="keyword">double</span>*), <span class="keyword">sizeof</span>(<span class="keyword">double</span>**));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Output:</span></span><br><span class="line">    <span class="comment">// 8 32 8</span></span><br><span class="line">    <span class="comment">// 8 8 8</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 阅读下文时，时刻记得，在内存中，这段数组不会额外储存任何指针</span></span><br><span class="line">    <span class="comment">// 真实情况是只有 3*4 个 double 型的数据紧密排列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">12</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[%4d] =&gt; %.1lf\n"</span>, i,    ( *a       ) [i]             );</span><br><span class="line">        <span class="comment">// *a 得到 double [4]，取下标可得 double，</span></span><br><span class="line">        <span class="comment">// 此例说明二维数组数据也是紧凑地并排放置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Output:</span></span><br><span class="line">        <span class="comment">// [   0] =&gt; 0.0</span></span><br><span class="line">        <span class="comment">// [   1] =&gt; 0.1</span></span><br><span class="line">        <span class="comment">// [   2] =&gt; 0.2</span></span><br><span class="line">        <span class="comment">// [   3] =&gt; 0.3</span></span><br><span class="line">        <span class="comment">// [   4] =&gt; 1.0</span></span><br><span class="line">        <span class="comment">// [   5] =&gt; 1.1</span></span><br><span class="line">        <span class="comment">// [   6] =&gt; 1.2</span></span><br><span class="line">        <span class="comment">// [   7] =&gt; 1.3</span></span><br><span class="line">        <span class="comment">// [   8] =&gt; 2.0</span></span><br><span class="line">        <span class="comment">// [   9] =&gt; 2.1</span></span><br><span class="line">        <span class="comment">// [  10] =&gt; 2.2</span></span><br><span class="line">        <span class="comment">// [  11] =&gt; 2.3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[%4d] =&gt; %.1lf\n"</span>, i,    ( *(a + <span class="number">1</span>) ) [i]             );</span><br><span class="line">        <span class="comment">// a+1 (类型依旧是指向 double[4] 的指针）指向将 a 视为数组的下一个元素，</span></span><br><span class="line">        <span class="comment">// 即跳过了第一个 double[4]</span></span><br><span class="line">        <span class="comment">// 然后解引用得到第二个 double[4]，再取下标，得到第二行开始的各个 double</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Output:</span></span><br><span class="line">        <span class="comment">// [   0] =&gt; 1.0</span></span><br><span class="line">        <span class="comment">// [   1] =&gt; 1.1</span></span><br><span class="line">        <span class="comment">// [   2] =&gt; 1.2</span></span><br><span class="line">        <span class="comment">// [   3] =&gt; 1.3</span></span><br><span class="line">        <span class="comment">// [   4] =&gt; 2.0</span></span><br><span class="line">        <span class="comment">// [   5] =&gt; 2.1</span></span><br><span class="line">        <span class="comment">// [   6] =&gt; 2.2</span></span><br><span class="line">        <span class="comment">// [   7] =&gt; 2.3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[%4d] =&gt; %.1lf\n"</span>, i,    ( (<span class="keyword">double</span> *) a   + <span class="number">1</span> ) [i]   );</span><br><span class="line">        <span class="comment">// 先让 a 的类型从 double(*)[4] 变为 double(*)</span></span><br><span class="line">        <span class="comment">// 通过强制转换，我们故意让类型系统丢失了 a 的二维维度这个信息</span></span><br><span class="line">        <span class="comment">// 现在可以看成：a 是一个指针，但指向的数据类型不再是“double [4]”</span></span><br><span class="line">        <span class="comment">// 而是“double”（丢了维度信息）</span></span><br><span class="line">        <span class="comment">// 现在，double* 型的 a+1 不再是指向下一个 double[4]，</span></span><br><span class="line">        <span class="comment">// 而是指向往后跳过一个 double 的内存处</span></span><br><span class="line">        <span class="comment">// 接着，将 a+1 这个指针视作数组，取下标得到 double</span></span><br><span class="line">        <span class="comment">// 可以发现，这一次跳过的不是一行，而是一个元素(一个 double)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Output:</span></span><br><span class="line">        <span class="comment">// [   0] =&gt; 0.1</span></span><br><span class="line">        <span class="comment">// [   1] =&gt; 0.2</span></span><br><span class="line">        <span class="comment">// [   2] =&gt; 0.3</span></span><br><span class="line">        <span class="comment">// [   3] =&gt; 1.0</span></span><br><span class="line">        <span class="comment">// [   4] =&gt; 1.1</span></span><br><span class="line">        <span class="comment">// [   5] =&gt; 1.2</span></span><br><span class="line">        <span class="comment">// [   6] =&gt; 1.3</span></span><br><span class="line">        <span class="comment">// [   7] =&gt; 2.0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 综上，通过实验可得到以下结论：</span></span><br><span class="line">    <span class="comment">// 1. 二维数组在内存里依旧是线性储存，前行尾与后行首是完全紧挨着的</span></span><br><span class="line">    <span class="comment">// 2. 在传递参数的过程中，因为编译器会自动解开第一层数组，转换成指针</span></span><br><span class="line">    <span class="comment">//    本来就已经丢失第一维的长度了，所以函数原型可忽略第一维度</span></span><br><span class="line">    <span class="comment">//    但不可忽略后续维度</span></span><br><span class="line">    <span class="comment">// 3. 对于编译器，指针指向的类型十分重要</span></span><br><span class="line">    <span class="comment">//    知道了指针指向什么数据才可以对其进行 +1、解引用等操作</span></span><br><span class="line">    <span class="comment">// 4. 二维数组本质依旧是一维数组，只是指向的数据是另外的数组</span></span><br><span class="line">    <span class="comment">//    二维数组的第二层维度一旦被强制去除，将表现出与一维数组类似的行为</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="c, 数组, 指针" scheme="http://oyiadin.github.io/tags/c-%E6%95%B0%E7%BB%84-%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>HelloWorld：从 C 到 ASM 之旅</title>
    <link href="http://oyiadin.github.io/2017/a-asm-helloworld-generated-from-c/"/>
    <id>http://oyiadin.github.io/2017/a-asm-helloworld-generated-from-c/</id>
    <published>2017-12-12T14:00:00.000Z</published>
    <updated>2018-01-29T06:52:08.102Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* filename: helloworld.c */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hello</span><span class="params">(<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Received: %d\n"</span>, b);</span><br><span class="line">    <span class="keyword">return</span> b+<span class="number">333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">111</span>, b=<span class="number">222</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Passing arguments: %d, %d\n"</span>, a, b);</span><br><span class="line">    ++a;</span><br><span class="line">    <span class="keyword">int</span> c = hello(b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">444</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">/* gcc -S helloworld.c -o helloworld.asm */</span><br><span class="line">/* filename: helloworld.asm */</span><br><span class="line"></span><br><span class="line">    .file   &quot;helloworld.c&quot;</span><br><span class="line">    .section .rdata,&quot;dr&quot;</span><br><span class="line"></span><br><span class="line">LC0:</span><br><span class="line">    .ascii &quot;Received: %d\12\0&quot;</span><br><span class="line">    .text</span><br><span class="line">    .globl  _hello</span><br><span class="line">    .def    _hello; .scl    2;  .type   32; .endef</span><br><span class="line">_hello:                             hello 函数开始的地址</span><br><span class="line">LFB10:</span><br><span class="line">    .cfi_startproc                  cfi stands for call frame information</span><br><span class="line">                                    for debugging purpose [1] [2]</span><br><span class="line">    pushl   %ebp                    保护 main() 的栈基</span><br><span class="line">    .cfi_def_cfa_offset 8</span><br><span class="line">    .cfi_offset 5, -8</span><br><span class="line">    movl    %esp, %ebp              重设栈基，新空栈 [3]</span><br><span class="line">                                    进入(stdcall, [4])函数后首先需要的步骤</span><br><span class="line">    .cfi_def_cfa_register 5</span><br><span class="line">    subl    $24, %esp               我也不清楚为什么要拓展这么大的空间</span><br><span class="line">    movl    8(%ebp), %eax           8(%ebp) 就是传过来的 b</span><br><span class="line">                                    准备调用 printf()</span><br><span class="line">    movl    %eax, 4(%esp)           先把第二个参数入栈</span><br><span class="line">    movl    $LC0, (%esp)            再把第一个参数入栈，LC0 正好就是对应数据</span><br><span class="line">    call    _printf                 正式调用 printf()</span><br><span class="line">    movl    8(%ebp), %eax           准备好当前函数的 b（从内存中挪到寄存器）</span><br><span class="line">    addl    $333, %eax              b += 555</span><br><span class="line">                                    不用挪回内存，因为本函数已经不需要用到 b 了</span><br><span class="line">    leave</span><br><span class="line">    .cfi_restore 5</span><br><span class="line">    .cfi_def_cfa 4, 4</span><br><span class="line">    ret                             回到 main 函数</span><br><span class="line">                                    %eax 是约定好的放置函数返回值的地方 [4]</span><br><span class="line">    .cfi_endproc</span><br><span class="line"></span><br><span class="line">LFE10:</span><br><span class="line">    .def    ___main;    .scl    2;  .type   32; .endef</span><br><span class="line">    .section .rdata,&quot;dr&quot;</span><br><span class="line">LC1:</span><br><span class="line">    .ascii &quot;Passing arguments: %d, %d\12\0&quot;</span><br><span class="line">    .text</span><br><span class="line">    .globl  _main</span><br><span class="line">    .def    _main;  .scl    2;  .type   32; .endef</span><br><span class="line">_main:</span><br><span class="line">LFB11:</span><br><span class="line">    .cfi_startproc</span><br><span class="line">    pushl   %ebp                    保护栈基</span><br><span class="line">    .cfi_def_cfa_offset 8</span><br><span class="line">    .cfi_offset 5, -8</span><br><span class="line">    movl    %esp, %ebp              重设栈基，新空栈</span><br><span class="line">    .cfi_def_cfa_register 5</span><br><span class="line">    andl    $-16, %esp</span><br><span class="line">    subl    $32, %esp</span><br><span class="line">    call    ___main                 我也不清楚这个 __main 是什么</span><br><span class="line">    movl    $111, 28(%esp)          局部变量存在于栈中 [5]</span><br><span class="line">    movl    $222, 24(%esp)</span><br><span class="line">    movl    24(%esp), %eax          参数开始入栈，从右到左 [4]</span><br><span class="line">    movl    %eax, 8(%esp)</span><br><span class="line">    movl    28(%esp), %eax</span><br><span class="line">    movl    %eax, 4(%esp)</span><br><span class="line">    movl    $LC1, (%esp)</span><br><span class="line">    call    _printf                 正式调用 printf()</span><br><span class="line">    addl    $1, 28(%esp)            ++a</span><br><span class="line">    movl    24(%esp), %eax</span><br><span class="line">    movl    %eax, (%esp)            这两行使参数 b 入栈</span><br><span class="line">    call    _hello                  调用 hello</span><br><span class="line">                                    gcc 自动给函数名前缀一个 _ 符号</span><br><span class="line">                                    这在 c++ 中有不同的规则</span><br><span class="line">                                    所以有些代码需要 extern &quot;C&quot;</span><br><span class="line">    movl    %eax, 20(%esp)          hello() 的返回值置于 %eax，入栈成为局部变量 c</span><br><span class="line">    movl    $444, %eax              同样，%eax 放置函数返回值，main 也不例外</span><br><span class="line">    leave</span><br><span class="line">    .cfi_restore 5</span><br><span class="line">    .cfi_def_cfa 4, 4</span><br><span class="line">    ret</span><br><span class="line">    .cfi_endproc</span><br><span class="line">LFE11:</span><br><span class="line">    .ident  &quot;GCC: (GNU) 5.3.0&quot;</span><br><span class="line">    .def    _printf;    .scl    2;  .type   32; .endef</span><br></pre></td></tr></table></figure><hr><p>Reference:</p><p><a href="https://stackoverflow.com/a/33732119" target="_blank" rel="noopener">1: In assembly code how .cfi directives work - An answer by @ysdx, Stackoverflow</a><br><a href="http://sourceware.org/binutils/docs-2.18/as/CFI-directives.html" target="_blank" rel="noopener">2: .cfi directives</a><br><a href="https://en.wikipedia.org/wiki/Call_stack#Structure" target="_blank" rel="noopener">3: Call stack #Structure, wikipedia</a><br><a href="https://zh.wikipedia.org/wiki/X86%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A#stdcall" target="_blank" rel="noopener">4: X86 调用约定 #stdcall, wikipedia</a><br><a href="https://www.jianshu.com/p/b2380e47d005" target="_blank" rel="noopener">5: C语言-内存管理基础, 简书</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="c, asm, helloworld" scheme="http://oyiadin.github.io/tags/c-asm-helloworld/"/>
    
  </entry>
  
</feed>
