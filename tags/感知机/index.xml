<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>感知机 on oyiadin</title>
    <link>https://blog.b1n.top/tags/%E6%84%9F%E7%9F%A5%E6%9C%BA/</link>
    <description>Recent content in 感知机 on oyiadin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 07 Aug 2018 15:46:58 +0000</lastBuildDate>
    
	<atom:link href="https://blog.b1n.top/tags/%E6%84%9F%E7%9F%A5%E6%9C%BA/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>用Tensorflow实现逻辑与</title>
      <link>https://blog.b1n.top/posts/deep-learning/perceptron-learn-and/</link>
      <pubDate>Tue, 07 Aug 2018 15:46:58 +0000</pubDate>
      
      <guid>https://blog.b1n.top/posts/deep-learning/perceptron-learn-and/</guid>
      <description>直接使用底层 API 首先还是一样，导入需要的库。因为要画 3D 的图，需要额外导入 Axes3D。
import numpy as np import tensorflow as tf import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D  设置超参数及训练所需数据
LEARNING_RATE = 0.08 EPOCHES = 500 X_input = np.array([[0., 0.], [0., 1.], [1., 0.], [1., 1.]]) Y_input = np.array([[0.], [0.], [0.], [1.]])  如果不带激活函数的话，训练结果会收敛于 [-0.25, 0.25, 0.25, 0.75]，虽然可以算是训练成功了，不过我不满意。将激活函数函数设为 tf.nn.relu 之后，训练结果就很不错了，很快就收敛到 [0, 0, 0, 1]。
X = tf.placeholder(tf.float32, (None, 2)) Y = tf.placeholder(tf.float32, (None, 1)) W = tf.</description>
    </item>
    
  </channel>
</rss>